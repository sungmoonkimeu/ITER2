{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# From_distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from py_pol import degrees, np\n",
    "from py_pol.jones_vector import Jones_vector, create_Jones_vectors\n",
    "from py_pol.stokes import Stokes, create_Stokes\n",
    "\n",
    "np.set_printoptions(precision=2)\n",
    "np.set_printoptions(suppress=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Jones_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Complex, 1D\n",
    "N = 36\n",
    "angles = np.linspace(0, 360*degrees, N)\n",
    "phase = 290*degrees\n",
    "delay = 290*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase))\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Direct = \n",
      "[+0.684-1.879j]   \n",
      "[-1.532-1.286j]   \n",
      "\n",
      "Fit = \n",
      "[+0.684-1.879j]   \n",
      "[-1.532-1.286j]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_vector('Direct')\n",
    "J.from_distribution(Ex=Ex, Ey=Ey)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ex, Ey=Ey, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Complex, 2D\n",
    "N = 36\n",
    "angles = np.linspace(0, 360*degrees, N)\n",
    "phase = 270*degrees\n",
    "delay = 270*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase))\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase))\n",
    "phase = 90*degrees\n",
    "delay = 180*degrees\n",
    "Ex = np.vstack((Ex, 2 * np.exp(1j * (angles + phase))))\n",
    "Ey = np.vstack((Ey, 2 * np.exp(1j * (angles + delay + phase))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Direct = \n",
      "[-0.000-2.000j]   [+0.000+2.000j]   \n",
      "[-2.000+0.000j]   [-0.000-2.000j]   \n",
      "\n",
      "Fit = \n",
      "[+0.000-2.000j]   [-0.000+2.000j]   \n",
      "[-2.000+0.000j]   [+0.000-2.000j]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_vector('Direct')\n",
    "J.from_distribution(Ex=Ex, Ey=Ey)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ex, Ey=Ey, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Real, 1D\n",
    "N = 36\n",
    "angles = np.linspace(0, 360*degrees, N)\n",
    "phase = 20*degrees\n",
    "delay = 170*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase)).real\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase)).real"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Direct = \n",
      "[+1.879+0.684j]   \n",
      "[-1.970-0.347j]   \n",
      "\n",
      "Fit = \n",
      "[+1.879+0.684j]   \n",
      "[-1.970-0.347j]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_vector('Direct')\n",
    "J.from_distribution(Ex=Ex, Ey=Ey)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ex, Ey=Ey, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Real, 2D\n",
    "N = 36\n",
    "angles = np.linspace(0, 360*degrees, N)\n",
    "phase = 20*degrees\n",
    "delay = 170*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase)).real\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase)).real\n",
    "phase = 90*degrees\n",
    "delay = 180*degrees\n",
    "Ex = np.vstack((Ex, 2 * np.exp(1j * (angles + phase)).real))\n",
    "Ey = np.vstack((Ey, 2 * np.exp(1j * (angles + delay + phase)).real))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Direct = \n",
      "[+1.879+0.684j]   [+0.000+1.998j]   \n",
      "[-1.970-0.347j]   [-0.000-1.998j]   \n",
      "\n",
      "Fit = \n",
      "[+1.879+0.684j]   [-0.001+1.998j]   \n",
      "[-1.970-0.347j]   [+0.001-1.998j]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_vector('Direct')\n",
    "J.from_distribution(Ex=Ex, Ey=Ey)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ex, Ey=Ey, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Real, 1D, wrong N_period\n",
    "N = 361\n",
    "angles = np.linspace(0, 5 * 360*degrees, N)\n",
    "phase = 20*degrees\n",
    "delay = 170*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase)).real\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase)).real"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Direct = \n",
      "[+1.879+0.684j]   \n",
      "[-1.970-0.347j]   \n",
      "\n",
      "Fit = \n",
      "[-0.124-1.996j]   \n",
      "[+0.016-0.052j]   \n",
      "\n",
      "Fit correct = \n",
      "[+1.879+0.684j]   \n",
      "[-1.970-0.347j]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_vector('Direct')\n",
    "J.from_distribution(Ex=Ex, Ey=Ey)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ex, Ey=Ey, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ex, Ey=Ey, method='fit', N_periods=5)\n",
    "J.name = 'Fit correct'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stokes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Complex, 1D\n",
    "N = 36\n",
    "angles = np.linspace(0, 360*degrees, N)\n",
    "phase = 270*degrees\n",
    "delay = 270*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase))\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Direct = \n",
      "[+8.000]   \n",
      "[+0.000]   \n",
      "[-0.000]   \n",
      "[+8.000]   \n",
      "\n",
      "Fit = \n",
      "[+8.000]   \n",
      "[+0.000]   \n",
      "[-0.000]   \n",
      "[+8.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Stokes('Direct')\n",
    "J.from_distribution(Ex=Ex, Ey=Ey)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ex, Ey=Ey, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Complex, 1D, unpolarized\n",
    "N = 361\n",
    "angles = np.linspace(0, 360*degrees, N)\n",
    "phase = 270*degrees\n",
    "delay = 270*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase))\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase))\n",
    "\n",
    "r1 = np.random.normal(size=N, scale=0.5)\n",
    "r2 = np.random.rand(N) * 2*np.pi\n",
    "r3 = np.random.rand(N) * 2*np.pi\n",
    "Exr = r1 * np.exp(1j * r2)\n",
    "Eyr = r1 * np.exp(1j * r3)\n",
    "Ext = Ex + Exr\n",
    "Eyt = Ey + Eyr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original + S = \n",
      "[+8.286]   \n",
      "[+0.000]   \n",
      "[-0.000]   \n",
      "[+8.000]   \n",
      "\n",
      "Direct = \n",
      "[+8.371]   \n",
      "[-0.116]   \n",
      "[+0.186]   \n",
      "[+7.792]   \n",
      "\n",
      "Fit = \n",
      "[+8.233]   \n",
      "[-0.110]   \n",
      "[+0.097]   \n",
      "[+8.094]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Stokes('Original')\n",
    "J1.from_distribution(Ex=Ex, Ey=Ey)\n",
    "J2 = Stokes()\n",
    "J2.from_components((scale, 0, 0, 0), global_phase=None)\n",
    "print(J1+J2)\n",
    "J = Stokes('Direct')\n",
    "J.from_distribution(Ex=Ext, Ey=Eyt)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ext, Ey=Eyt, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Complex, 2D\n",
    "N = 36\n",
    "angles = np.linspace(0, 360*degrees, N)\n",
    "phase = 270*degrees\n",
    "delay = 270*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase))\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase))\n",
    "phase = 90*degrees\n",
    "delay = 180*degrees\n",
    "Ex = np.vstack((Ex, 2 * np.exp(1j * (angles + phase))))\n",
    "Ey = np.vstack((Ey, 2 * np.exp(1j * (angles + delay + phase))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Direct = \n",
      "[+8.000]   [+8.000]   \n",
      "[+0.000]   [+0.000]   \n",
      "[-0.000]   [-8.000]   \n",
      "[+8.000]   [-0.000]   \n",
      "\n",
      "Fit = \n",
      "[+8.000]   [+8.000]   \n",
      "[+0.000]   [+0.000]   \n",
      "[-0.000]   [-8.000]   \n",
      "[+8.000]   [-0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Stokes('Direct')\n",
    "J.from_distribution(Ex=Ex, Ey=Ey)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ex, Ey=Ey, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Real, 1D\n",
    "N = 36\n",
    "angles = np.linspace(0, 360*degrees, N)\n",
    "phase = 20*degrees\n",
    "delay = 170*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase)).real\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase)).real"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Direct = \n",
      "[+8.000]   \n",
      "[-0.000]   \n",
      "[-7.878]   \n",
      "[-1.389]   \n",
      "\n",
      "Fit = \n",
      "[+8.000]   \n",
      "[-0.000]   \n",
      "[-7.878]   \n",
      "[-1.389]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Stokes('Direct')\n",
    "J.from_distribution(Ex=Ex, Ey=Ey)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ex, Ey=Ey, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Real, 1D, unpolarized\n",
    "N = 361\n",
    "angles = np.linspace(0, 360*degrees, N)\n",
    "phase = 270*degrees\n",
    "delay = 270*degrees\n",
    "Ex = 2 * np.exp(1j * (angles + phase))\n",
    "Ey = 2 * np.exp(1j * (angles + delay + phase))\n",
    "\n",
    "r1 = np.random.normal(size=N, scale=0.5)\n",
    "r2 = np.random.rand(N) * 2*np.pi\n",
    "r3 = np.random.rand(N) * 2*np.pi\n",
    "Exr = r1 * np.exp(1j * r2)\n",
    "Eyr = r1 * np.exp(1j * r3)\n",
    "Ext = Ex + Exr\n",
    "Eyt = Ey + Eyr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original + S = \n",
      "[+8.269]   \n",
      "[+0.000]   \n",
      "[-0.000]   \n",
      "[+8.000]   \n",
      "\n",
      "Direct = \n",
      "[+19.211]   \n",
      "[+1.306]   \n",
      "[-15.647]   \n",
      "[+11.068]   \n",
      "\n",
      "Fit = \n",
      "[+8.026]   \n",
      "[+0.371]   \n",
      "[+0.222]   \n",
      "[+7.885]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Stokes('Original')\n",
    "J1.from_distribution(Ex=Ex, Ey=Ey)\n",
    "J2 = Stokes()\n",
    "J2.from_components((np.var(r1), 0, 0, 0), global_phase=None)\n",
    "print(J1+J2)\n",
    "J = Stokes('Direct')\n",
    "J.from_distribution(Ex=Ext.real, Ey=Eyt.real)\n",
    "print(J)\n",
    "J.from_distribution(Ex=Ext.real, Ey=Eyt.real, method='fit')\n",
    "J.name = 'Fit'\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "operands could not be broadcast together with shapes (1,5) (11,) ",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-66-c509aa8c7736>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0ma\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m11\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mb\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mones\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mb\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m: operands could not be broadcast together with shapes (1,5) (11,) "
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
