{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0.2\n"
     ]
    }
   ],
   "source": [
    "from py_pol import np, degrees\n",
    "from py_pol.mueller import Mueller\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3.141592653589793, 0.47123889803846897, 0.0, 0.47123889803846897, 0.0)\n",
      "------------------------------------------------------\n",
      "Matrx M decomposed as M = Mr * Md.\n",
      "\n",
      "The retarder Mueller matrix is:\n",
      "retarder = \n",
      "  [+1.0000, -0.0000, -0.0000, -0.0000]\n",
      "  [-0.0000, -0.3090, +0.9511, +0.0000]\n",
      "  [-0.0000, +0.9511, +0.3090, +0.0000]\n",
      "  [+0.0000, +0.0000, +0.0000, -1.0000]\n",
      "\n",
      "Parameters:\n",
      "  - Delay = 180.0 deg.\n",
      "  - Angle = 27.0 deg; Delay between components = 5.276611320824144e-07 deg.\n",
      "  - Azimuth = 27.0 deg; Ellipticity = 2.1344341156289852e-07 deg.\n",
      "\n",
      "The diatenuator Mueller matrix is:\n",
      "diattenuator = \n",
      "  [+0.4085, -0.0324, -0.0446, +0.0000]\n",
      "  [-0.0324, +0.4060, +0.0018, -0.0000]\n",
      "  [-0.0446, +0.0018, +0.4072, -0.0000]\n",
      "  [+0.0000, -0.0000, -0.0000, +0.4047]\n",
      "\n",
      "Parameters:\n",
      "  - p1 = 0.6808781130489161; p2 = 0.5944320357003163.\n",
      "  - Angle = 63.0 deg; Delay between components = 180.0 deg.\n",
      "  - Azimuth = 117.0 deg; Ellipticity = 0.0 deg.\n",
      "\n",
      "The mean square error in the decomposition is: 1.3825648157697098e-16\n",
      "The maximum error in the decomposition is: 1.1102230246251565e-16\n",
      "------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "(a, b) = np.random.rand(2)\n",
    "M1 = Mueller('Mp')\n",
    "M1.diattenuator_linear(p1=a, p2=b, angle=27*degrees)\n",
    "M2 = Mueller('Mr')\n",
    "M2.half_waveplate(angle=27*degrees)\n",
    "print(M2.analysis.retarder())\n",
    "M3 = M2*M1\n",
    "Mr, Md = M3.analysis.decompose_pure(verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7.599085137416525e-14\n"
     ]
    }
   ],
   "source": [
    "N = 100\n",
    "error = np.zeros(N)\n",
    "for ind in range(N):\n",
    "    M2 = Mueller('Original')\n",
    "    ret = (1+np.random.rand(1)[0]) * 180 * degrees\n",
    "    azim = np.random.rand(1)[0] * 180 * degrees\n",
    "    elip = (1-2*np.random.rand(1)[0]) * 45 * degrees\n",
    "    M2.retarder_azimuth_ellipticity_from_Jones(ret, azimuth=azim, ellipticity=elip)\n",
    "    D, azimuth, ellipticity = M2.analysis.retarder(param='azimuth-ellipticity')\n",
    "    R2 = M2.retardance_vector()\n",
    "    M3 = Mueller('Reconstructed')\n",
    "    M3.retarder_azimuth_ellipticity_from_Jones(D, azimuth=azimuth, ellipticity=ellipticity)\n",
    "    R3 = M3.retardance_vector()\n",
    "    dif = np.array([ret-(2*np.pi-D), azim-(np.pi/2+azimuth)%np.pi, elip+ellipticity])\n",
    "    error[ind] = np.linalg.norm(dif)\n",
    "#     print('Parametros originales / medidos:')\n",
    "#     print('   - Retardance: {} deg -> {} deg'.format(ret/degrees, D/degrees))\n",
    "#     print('   - Azimuth: {} deg -> {} deg'.format(azim/degrees, azimuth/degrees))\n",
    "#     print('   - Ellipticity: {} deg -> {} deg'.format(elip/degrees, ellipticity/degrees))\n",
    "#     print(dif)\n",
    "\n",
    "print(np.linalg.norm(error))\n",
    "    \n",
    "# print('Parametros originales / medidos:')\n",
    "# print('   - Retardance: {} deg -> {} deg'.format(ret/degrees, D/degrees))\n",
    "# print('   - Azimuth: {} deg -> {} deg'.format(azim/degrees, azimuth/degrees))\n",
    "# print('   - Ellipticity: {} deg -> {} deg'.format(elip/degrees, ellipticity/degrees))\n",
    "# print('')\n",
    "# print('The original matrix retardance vector:')\n",
    "# print(R2)\n",
    "# print(M2)\n",
    "# print('')\n",
    "# print('The reconstructed matrix is:')\n",
    "# print(R3)\n",
    "# print(M3)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
