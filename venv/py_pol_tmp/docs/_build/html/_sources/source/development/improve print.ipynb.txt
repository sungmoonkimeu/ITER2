{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# improve printing\n",
    "\n",
    "date: 19/01/26\n",
    "\n",
    "author: Luis Miguel Sanchez Brea\n",
    "\n",
    "When we have a polarizer and rotate it several times, we get names as:\n",
    "\n",
    "    M1 @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º \n",
    "\n",
    "Here I try to obtaine\n",
    "\n",
    "    M1 @135.00º \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import sqrt\n",
    "from py_pol.jones_matrix import Jones_matrix\n",
    "from py_pol import degrees, np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 @45.00º = \n",
      "      [+0.500, +0.500]\n",
      "      [+0.500, +0.500]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M1')\n",
    "M1.diattenuator_linear(p1=1, p2=0, angle=45*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "M1 @45.00º @45.00º @45.00º @45.00º = \n",
       "      [+1, -0]\n",
       "      [-0, -0]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M1.rotate(angle=45*degrees, keep=True, change_name=False)\n",
    "M1.rotate(angle=45*degrees, keep=True, change_name=False)\n",
    "M1.rotate(angle=45*degrees, keep=True, change_name=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 @45.00º @45.00º @45.00º @45.00º = \n",
      "      [+1, -0]\n",
      "      [-0, -0]\n"
     ]
    }
   ],
   "source": [
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Esto se puede arreglar, sumando los datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 @45.00º @45.00º @45.00º @45.00º \n"
     ]
    }
   ],
   "source": [
    "text=\"{} \".format(M1.name)\n",
    "\n",
    "print(text)\n",
    "text=text.split(\"@\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['M1 ', '45.00º ', '45.00º ', '45.00º ', '45.00º ']\n"
     ]
    }
   ],
   "source": [
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1\n"
     ]
    }
   ],
   "source": [
    "name_original=text[0][0:-1]\n",
    "print(name_original)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45.00 45.0\n",
      "45.00 45.0\n",
      "45.00 45.0\n",
      "45.00 45.0\n",
      "180.0\n"
     ]
    }
   ],
   "source": [
    "angle_number=0\n",
    "for i, ti in enumerate(text[1:]):\n",
    "    angle=float(ti[:-2])\n",
    "    print(ti[:-2], angle)\n",
    "    angle_number=angle_number+angle\n",
    "print(angle_number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "name_final=\"{} @{}º\".format(name_original,str(angle_number))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 @180.0º\n"
     ]
    }
   ],
   "source": [
    "print(name_final)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## pass to function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "M1.name = \" @@ \"\n",
    "M1.name = \" kk\"\n",
    "M1.name = ''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def repair_name(name_initial):\n",
    "    \"\"\"\n",
    "    When we have a polarizer and rotate it several times, we get names as:\n",
    "        M1 @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º\n",
    "    Here I try to obtain:\n",
    "        M1 @135.00º\n",
    "    \"\"\"\n",
    "\n",
    "    num_angles = name_initial.count('@')\n",
    "    if num_angles == 0:\n",
    "        return name_initial\n",
    "    try:\n",
    "        text = \"{} \".format(name_initial)\n",
    "\n",
    "        text = text.split(\"@\")\n",
    "        name_original = text[0][0:-1]\n",
    "        angle_number = 0\n",
    "        for i, ti in enumerate(text[1:]):\n",
    "            angle = float(ti[:-2])\n",
    "            angle_number = angle_number + angle\n",
    "        angle_number = np.remainder(angle_number, 360)\n",
    "        name_final = \"{} @{:2.2f}º\".format(name_original, angle_number)\n",
    "    except:\n",
    "        name_final = name_initial\n",
    "    return name_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(M1.name)\n",
    "name_final = repair_name(M1.name)\n",
    "print(name_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
