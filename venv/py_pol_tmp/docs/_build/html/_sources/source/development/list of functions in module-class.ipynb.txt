{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# List of functions in module - class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from py_pol import degrees, np\n",
    "from py_pol.stokes import Stokes\n",
    "import py_pol\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['__add__',\n",
       " '__class__',\n",
       " '__delattr__',\n",
       " '__dict__',\n",
       " '__dir__',\n",
       " '__doc__',\n",
       " '__eq__',\n",
       " '__format__',\n",
       " '__ge__',\n",
       " '__getattribute__',\n",
       " '__gt__',\n",
       " '__hash__',\n",
       " '__init__',\n",
       " '__init_subclass__',\n",
       " '__le__',\n",
       " '__lt__',\n",
       " '__module__',\n",
       " '__mul__',\n",
       " '__ne__',\n",
       " '__new__',\n",
       " '__reduce__',\n",
       " '__reduce_ex__',\n",
       " '__repr__',\n",
       " '__rmul__',\n",
       " '__setattr__',\n",
       " '__sizeof__',\n",
       " '__str__',\n",
       " '__sub__',\n",
       " '__subclasshook__',\n",
       " '__weakref__',\n",
       " '_actualize_',\n",
       " 'check',\n",
       " 'circular_light',\n",
       " 'clear',\n",
       " 'depolarize',\n",
       " 'draw_ellipse',\n",
       " 'draw_poincare',\n",
       " 'elliptical_light',\n",
       " 'from_Jones',\n",
       " 'from_elements',\n",
       " 'from_matrix',\n",
       " 'general_azimuth_ellipticity',\n",
       " 'general_charac_angles',\n",
       " 'get',\n",
       " 'linear_light',\n",
       " 'rotate',\n",
       " 'rotate_deprecated',\n",
       " 'update']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir(Stokes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class Stokes in module py_pol.stokes:\n",
      "\n",
      "class Stokes(builtins.object)\n",
      " |  Class for Stokes vectors\n",
      " |  \n",
      " |  Parameters:\n",
      " |      name (str): name of vector for string representation\n",
      " |  \n",
      " |  Attributes:\n",
      " |      self.M (numpy.matrix): 4x1 array\n",
      " |      self.parameters (class): parameters of stokes\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __add__(self, other)\n",
      " |      Adds two Stokes vectors considering that are mutually incoherent\n",
      " |      \n",
      " |      Parameters:\n",
      " |          other (Stokes): 2nd Stokes vector to add\n",
      " |      \n",
      " |      Returns:\n",
      " |          Stokes: `s3 = s1 + s2`\n",
      " |  \n",
      " |  __init__(self, name='J')\n",
      " |      Initialize self.  See help(type(self)) for accurate signature.\n",
      " |  \n",
      " |  __mul__(self, other)\n",
      " |      Multiplies vector * number.\n",
      " |      \n",
      " |      Parameters:\n",
      " |          other (number): number to multiply\n",
      " |      \n",
      " |      Returns:\n",
      " |          Stokes: `s3 = number * s1`\n",
      " |  \n",
      " |  __repr__(self)\n",
      " |      Return repr(self).\n",
      " |  \n",
      " |  __rmul__(self, other)\n",
      " |      Multiplies vector * number.\n",
      " |      \n",
      " |      Parameters:\n",
      " |          other (number): number to multiply\n",
      " |      \n",
      " |      Returns:\n",
      " |          Stokes: `s3 =  s1 * number`\n",
      " |  \n",
      " |  __sub__(self, other)\n",
      " |      Substracts two Stokes vectors considering that are mutually incoherent\n",
      " |      \n",
      " |      Parameters:\n",
      " |          other (Stokes): 2nd Stokes vector to add\n",
      " |      \n",
      " |      Returns:\n",
      " |          Stokes: `s3 = s1 - s2`\n",
      " |  \n",
      " |  check(self, verbose=False)\n",
      " |      verifies that (s0,s1,s2,s3) Stokes vector is properly defined\n",
      " |      verifies that is a 4x1 numpy.matrix\n",
      " |  \n",
      " |  circular_light(self, kind='d', intensity=1)\n",
      " |      Creates a 4x1 Stokes vector for pure circular polarizer light\n",
      " |      \n",
      " |      Parameters:\n",
      " |          kind (str): 'd','r' - right, dextro, derecha.\n",
      " |                      'l', 'i' - left, levo, izquierda.\n",
      " |          intensity (float): Intensity of the light\n",
      " |      \n",
      " |      Returns:\n",
      " |          np.matrix 4x1 Stokes parameters\n",
      " |  \n",
      " |  clear(self)\n",
      " |      Removes data and name from stokes vector.\n",
      " |  \n",
      " |  depolarize(self, pol_degree, keep=True)\n",
      " |      Function that reduces de polarization degree of a Stokes vector\n",
      " |      homogeneously.\n",
      " |      \n",
      " |      Returns:\n",
      " |          S (4x1 numpy matrix): Stokes state.\n",
      " |  \n",
      " |  draw_ellipse(self, kind='', limit='', has_line=True, filename='')\n",
      " |      Draws polarization ellipse in stokes vector. If unpolarized light is present, a distribution of probability is given.\n",
      " |      \n",
      " |      Arguments:\n",
      " |          stokes_0 (Stokes): Stokes vector\n",
      " |          kind (str): 'line' 'probabilities'. 'Line': polarized + unpolarized ellipses. 'probabilities' is for unpolarized. Provides probabilities'\n",
      " |          size (float): size for drawing. If empty itis obtained from amplitudes\n",
      " |          has_line (bool or float): If True  draws polarized and 0.1 probability lines. If it is a number draws that probability.\n",
      " |          filename (str): if filled, name for drawing\n",
      " |      \n",
      " |      Returns:\n",
      " |          ax (handle): handle to axis.\n",
      " |          fig (handle): handle to fig\n",
      " |  \n",
      " |  draw_poincare(self, angle_view=[0.5235987755982988, -1.0471975511965976], label='s0', filename='')\n",
      " |      \"Draws stokes vector\n",
      " |      \n",
      " |      Arguments:\n",
      " |          angle_view (float, float): elevation, azimuth\n",
      " |          label (str): text for label of plot\n",
      " |          filename (str): is not empty saves figure\n",
      " |  \n",
      " |  elliptical_light(self, a=1, b=1, phase=0, angle=0, pol_degree=1)\n",
      " |      Creates a 4x1 Stokes vector for polarizer elliptical light\n",
      " |      \n",
      " |      Parameters:\n",
      " |          a (float): amplitude of x axis\n",
      " |          b (float): amplitude of y axis\n",
      " |          phase (float): phase shift between axis\n",
      " |          angle (float): rotation_matrix_Jones angle respect to x axis\n",
      " |          pol_degree (float): [0, 1]: polarization degree.\n",
      " |      \n",
      " |      Returns:\n",
      " |          np.matrix 4x1 numpy.matrix\n",
      " |  \n",
      " |  from_Jones(self, j, pol_degree=1)\n",
      " |      Creates a 4x1 Stokes vector from a 2x1 Jones vector.\n",
      " |      \n",
      " |      Parameters:\n",
      " |          j (Jones_vector object): Jones vector\n",
      " |          p (float or 1x2 float): Degree of polarization, or\n",
      " |              [linear, circular] degrees of polarization.\n",
      " |      \n",
      " |      Returns:\n",
      " |          S (4x1 numpy.matrix): Stokes vector.\n",
      " |  \n",
      " |  from_elements(self, s0, s1, s2, s3)\n",
      " |      Creates a 4x1 Stokes vector directly from the 4 elements [s0, s1, s2, s3]\n",
      " |      \n",
      " |      Parameters:\n",
      " |          s0 (float): intensity\n",
      " |          s1 (float): linear 0deg-90deg polarization\n",
      " |          s2 (float): linear 45deg-135deg polarization\n",
      " |          s3 (float): circular polarization\n",
      " |      \n",
      " |      Returns:\n",
      " |          S (4x1 numpy.matrix): Stokes vector.\n",
      " |  \n",
      " |  from_matrix(self, M)\n",
      " |      Creates a 4x1 Stokes vector from an external matrix.\n",
      " |      \n",
      " |      Parameters:\n",
      " |          M (4x1 numpy matrix): New matrix\n",
      " |      \n",
      " |      Returns:\n",
      " |          np.matrix 4x1 numpy.matrix\n",
      " |  \n",
      " |  general_azimuth_ellipticity(self, azimuth=0, ellipticity=0, intensity=1, pol_degree=1, is_depolarization=False)\n",
      " |      Creates a 4x1 Stokes vector given by their azimuth and ellipticity.\n",
      " |      \n",
      " |      References:\n",
      " |          J.J. Gil, R. Ossikovsky \"Polarized light and the Mueller Matrix approach\", CRC Press (2016), pp 137.\n",
      " |      \n",
      " |      Parameters:\n",
      " |          azimuth (float): [0, pi]: azimuth.\n",
      " |          ellipticity (float): [-pi/4, pi/4]: ellipticity.\n",
      " |          intensity (float): total intensity.\n",
      " |          pol_degree (float): [0, 1]: polarization degree.\n",
      " |          pol (bool): [Default: False] If true, pol_degree is depolarization\n",
      " |              degree instead.\n",
      " |      \n",
      " |      Returns:\n",
      " |          S (4x1 numpy.matrix): Stokes vector.\n",
      " |  \n",
      " |  general_charac_angles(self, alpha=0, delay=0, intensity=1, pol_degree=1, is_depolarization=False)\n",
      " |      Creates a 4x1 Stokes vector given by their characteristic angles.\n",
      " |      \n",
      " |      References:\n",
      " |          J.J. Gil, R. Ossikovsky \"Polarized light and the Mueller Matrix approach\", CRC Press (2016),pp 137.\n",
      " |      \n",
      " |      Parameters:\n",
      " |          alpha (float): [0, pi]: tan(alpha) is the ratio between field\n",
      " |              amplitudes of X and Y components.\n",
      " |          delay (float): [0, 2*pi]: phase difference between X and Y field\n",
      " |              components.\n",
      " |          intensity (float): total intensity.\n",
      " |          pol_degree (float): [0, 1]: polarization degree.\n",
      " |          pol (bool): [Default: False] If true, pol_degree is depolarization\n",
      " |              degree instead.\n",
      " |      \n",
      " |      Returns:\n",
      " |          S (4x1 numpy.matrix): Stokes vector.\n",
      " |  \n",
      " |  get(self)\n",
      " |      get self.M stokes vector\n",
      " |  \n",
      " |  linear_light(self, angle=0, intensity=1)\n",
      " |      Creates a 4x1 Stokes vector for pure linear polarizer light.\n",
      " |      \n",
      " |      Parameters:\n",
      " |          angle (float): angle of polarization axis with respect to 0deg.\n",
      " |          intensity (float): Intensity of the light\n",
      " |      \n",
      " |      Returns:\n",
      " |          np.matrix 4x1 Stokes parameters\n",
      " |  \n",
      " |  rotate(self, angle=0.0, keep=True, returns_matrix=False, change_name=True)\n",
      " |      Rotation of a Stokes vector\n",
      " |      \n",
      " |      M_rotated= rotation_matrix_Jones(-angle) * M\n",
      " |      \n",
      " |      Parameters:\n",
      " |          angle (float): angle of rotation_matrix_Jones in radians.\n",
      " |          keep (bool): if True self.M is updated. If False, it returns matrix and it is not updated in self.M.\n",
      " |          returns_matrix (bool): if True returns a matrix, else returns an instance to object\n",
      " |          change_name (bool): if True tries to repair name with @ rot @ rot -> @ 2*rot\n",
      " |  \n",
      " |  rotate_deprecated(self, angle=0.0, keep=True)\n",
      " |      Rotation of a Stokes vector\n",
      " |      \n",
      " |      M_rotated= rotation_matrix_Jones(-angle) * M\n",
      " |      \n",
      " |      Parameters:\n",
      " |          angle (float): angle of rotation_matrix_Jones in radians.\n",
      " |          keep (bool): if True self.M is updated. If False, it returns matrix and it is not updated in self.M.\n",
      " |  \n",
      " |  update(self)\n",
      " |      actualizes self.parameters.M = self.M\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(Stokes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "__add__\n",
      "__init__\n",
      "__mul__\n",
      "__repr__\n",
      "__rmul__\n",
      "__sub__\n",
      "_actualize_\n",
      "check\n",
      "circular_light\n",
      "clear\n",
      "depolarize\n",
      "draw_ellipse\n",
      "draw_poincare\n",
      "elliptical_light\n",
      "from_Jones\n",
      "from_elements\n",
      "from_matrix\n",
      "general_azimuth_ellipticity\n",
      "general_charac_angles\n",
      "get\n",
      "linear_light\n",
      "rotate\n",
      "rotate_deprecated\n",
      "update\n"
     ]
    }
   ],
   "source": [
    "from inspect import getmembers, isfunction\n",
    "\n",
    "functions_list = [o for o in getmembers(Stokes) if isfunction(o[1])]\n",
    "\n",
    "for func in functions_list:\n",
    "    print( func[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_pickle_method\n",
      "_unpickle_method\n",
      "azimuth_elipt_2_charac_angles\n",
      "charac_angles_2_azimuth_elipt\n",
      "check_eig\n",
      "comparison\n",
      "delta_kron\n",
      "distance\n",
      "divide_in_blocks\n",
      "execute_multiprocessing\n",
      "iscolumn\n",
      "isrow\n",
      "nearest\n",
      "nearest2\n",
      "order_eig\n",
      "params_to_list\n",
      "put_in_limits\n",
      "repair_name\n",
      "rotation_matrix_Jones\n",
      "rotation_matrix_Mueller\n",
      "seq\n",
      "which_quad\n"
     ]
    }
   ],
   "source": [
    "from inspect import getmembers, isfunction\n",
    "\n",
    "functions_list = [o for o in getmembers(py_pol.utils) if isfunction(o[1])]\n",
    "\n",
    "for func in functions_list:\n",
    "    print( func[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "azimuth_elipt_2_charac_angles\n",
      "draw_ellipse_stokes\n",
      "draw_poincare_sphere\n",
      "put_in_limits\n",
      "repair_name\n",
      "rotation_matrix_Mueller\n",
      "wraps\n"
     ]
    }
   ],
   "source": [
    "from inspect import getmembers, isfunction\n",
    "\n",
    "functions_list = [o for o in getmembers(py_pol.stokes) if isfunction(o[1])]\n",
    "\n",
    "for func in functions_list:\n",
    "    print( func[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get all functions of all classes of module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Jones_vector <class 'py_pol.jones_vector.Jones_vector'>\n",
      "  * __add__          <function Jones_vector.__add__ at 0x7f521ab188c8>\n",
      "  * __init__          <function Jones_vector.__init__ at 0x7f521ab18e18>\n",
      "  * __mul__          <function Jones_vector.__mul__ at 0x7f521ab18f28>\n",
      "  * __repr__          <function Jones_vector.__repr__ at 0x7f521ab210d0>\n",
      "  * __rmul__          <function Jones_vector.__rmul__ at 0x7f521ab21048>\n",
      "  * __sub__          <function Jones_vector.__sub__ at 0x7f521ab18950>\n",
      "  * _actualize_          <function Jones_vector._actualize_ at 0x7f521ab18ea0>\n",
      "  * circular_light          <function Jones_vector.circular_light at 0x7f521ab21a60>\n",
      "  * clear          <function Jones_vector.clear at 0x7f521ab21510>\n",
      "  * draw_ellipse          <function Jones_vector.draw_ellipse at 0x7f521ab21400>\n",
      "  * elliptical_light          <function Jones_vector.elliptical_light at 0x7f521ab21b70>\n",
      "  * from_Stokes          <function Jones_vector.from_Stokes at 0x7f521ab21840>\n",
      "  * from_elements          <function Jones_vector.from_elements at 0x7f521ab21620>\n",
      "  * from_matrix          <function Jones_vector.from_matrix at 0x7f521ab21730>\n",
      "  * general_azimuth_ellipticity          <function Jones_vector.general_azimuth_ellipticity at 0x7f521ab21c80>\n",
      "  * general_charac_angles          <function Jones_vector.general_charac_angles at 0x7f521ab21d90>\n",
      "  * get          <function Jones_vector.get at 0x7f521ab211e0>\n",
      "  * linear_light          <function Jones_vector.linear_light at 0x7f521ab21950>\n",
      "  * rotate          <function Jones_vector.rotate at 0x7f521ab21378>\n",
      "  * simplify          <function Jones_vector.simplify at 0x7f521ab21268>\n",
      "  * update          <function Jones_vector.update at 0x7f521ab21158>\n",
      "\n",
      "\n",
      "Parameters_Jones_Vector <class 'py_pol.jones_vector.Parameters_Jones_Vector'>\n",
      "  * __init__          <function Parameters_Jones_Vector.__init__ at 0x7f521ab21e18>\n",
      "  * __repr__          <function Parameters_Jones_Vector.__repr__ at 0x7f521ab21ea0>\n",
      "  * alpha          <function Parameters_Jones_Vector.alpha at 0x7f521ab240d0>\n",
      "  * azimuth          <function Parameters_Jones_Vector.azimuth at 0x7f521ab24158>\n",
      "  * delay          <function Parameters_Jones_Vector.delay at 0x7f521ab241e0>\n",
      "  * ellipticity_angle          <function Parameters_Jones_Vector.ellipticity_angle at 0x7f521ab24268>\n",
      "  * get_all          <function Parameters_Jones_Vector.get_all at 0x7f521ab21f28>\n",
      "  * intensity          <function Parameters_Jones_Vector.intensity at 0x7f521ab24048>\n",
      "  * ellipse_axes          <function Parameters_Jones_Vector.ellipse_axes at 0x7f521ab242f0>\n",
      "\n",
      "\n",
      "matrix <class 'numpy.matrixlib.defmatrix.matrix'>\n",
      "  * __array_finalize__          <function matrix.__array_finalize__ at 0x7f5227f86620>\n",
      "  * __getitem__          <function matrix.__getitem__ at 0x7f5227f866a8>\n",
      "  * __imul__          <function matrix.__imul__ at 0x7f5227f86840>\n",
      "  * __ipow__          <function matrix.__ipow__ at 0x7f5227f86950>\n",
      "  * __mul__          <function matrix.__mul__ at 0x7f5227f86730>\n",
      "  * __new__          <function matrix.__new__ at 0x7f5227f86598>\n",
      "  * __pow__          <function matrix.__pow__ at 0x7f5227f868c8>\n",
      "  * __rmul__          <function matrix.__rmul__ at 0x7f5227f867b8>\n",
      "  * __rpow__          <function matrix.__rpow__ at 0x7f5227f869d8>\n",
      "  * _align          <function matrix._align at 0x7f5227f86a60>\n",
      "  * _collapse          <function matrix._collapse at 0x7f5227f86ae8>\n",
      "  * all          <function matrix.all at 0x7f5227f870d0>\n",
      "  * any          <function matrix.any at 0x7f5227f87048>\n",
      "  * argmax          <function matrix.argmax at 0x7f5227f871e0>\n",
      "  * argmin          <function matrix.argmin at 0x7f5227f872f0>\n",
      "  * flatten          <function matrix.flatten at 0x7f5227f86d08>\n",
      "  * getA          <function matrix.getA at 0x7f5227f87488>\n",
      "  * getA1          <function matrix.getA1 at 0x7f5227f87510>\n",
      "  * getH          <function matrix.getH at 0x7f5227f876a8>\n",
      "  * getI          <function matrix.getI at 0x7f5227f87400>\n",
      "  * getT          <function matrix.getT at 0x7f5227f87620>\n",
      "  * max          <function matrix.max at 0x7f5227f87158>\n",
      "  * mean          <function matrix.mean at 0x7f5227f86d90>\n",
      "  * min          <function matrix.min at 0x7f5227f87268>\n",
      "  * prod          <function matrix.prod at 0x7f5227f86f28>\n",
      "  * ptp          <function matrix.ptp at 0x7f5227f87378>\n",
      "  * ravel          <function matrix.ravel at 0x7f5227f87598>\n",
      "  * squeeze          <function matrix.squeeze at 0x7f5227f86c80>\n",
      "  * std          <function matrix.std at 0x7f5227f86e18>\n",
      "  * sum          <function matrix.sum at 0x7f5227f86bf8>\n",
      "  * tolist          <function matrix.tolist at 0x7f5227f86b70>\n",
      "  * var          <function matrix.var at 0x7f5227f86ea0>\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from inspect import getmembers, isfunction, isclass\n",
    "\n",
    "class_list = [o for o in getmembers(py_pol.jones_vector) if isclass(o[1])]\n",
    "\n",
    "for class_ in class_list:\n",
    "    print( class_[0], class_[1])\n",
    "\n",
    "    exec('from py_pol.jones_vector import '+class_[0])\n",
    "    functions_list = [o for o in getmembers(eval(class_[0])) if isfunction(o[1])]\n",
    "\n",
    "    for func in functions_list:\n",
    "        print(\"  * {}          {}\".format(func[0], func[1]))\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "from py_pol.stokes import CustomError"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-f\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '-f'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-65-de0dfd10b54a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mfilename\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margv\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m         \u001b[0mtree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparse_ast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mfunc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtop_level_functions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"  %s\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-65-de0dfd10b54a>\u001b[0m in \u001b[0;36mparse_ast\u001b[0;34m(filename)\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mparse_ast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rt\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mast\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '-f'"
     ]
    }
   ],
   "source": [
    "# meter en archivo y llamar con python python func.py module.py\n",
    "import ast\n",
    "import sys\n",
    "\n",
    "def top_level_functions(body):\n",
    "    return (f for f in body if isinstance(f, ast.FunctionDef))\n",
    "\n",
    "def parse_ast(filename):\n",
    "    with open(filename, \"rt\") as file:\n",
    "        return ast.parse(file.read(), filename=filename)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    for filename in sys.argv[1:]:\n",
    "        print(filename)\n",
    "        tree = parse_ast(filename)\n",
    "        for func in top_level_functions(tree.body):\n",
    "            print(\"  %s\" % func.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "Stokes.*?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
