{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Había un error en \n",
    "\n",
    "    def _actualize_(f):\n",
    "        @wraps(f)\n",
    "        def wrapped(inst, *args, **kwargs):\n",
    "            f(inst, *args, **kwargs)\n",
    "            inst.update()\n",
    "            return\n",
    "\n",
    "        return wrapped\n",
    "\n",
    "Que pasa a\n",
    "        \n",
    "    def _actualize_(f):\n",
    "        @wraps(f)\n",
    "        def wrapped(inst, *args, **kwargs):\n",
    "            result = f(inst, *args, **kwargs)\n",
    "            inst.update()\n",
    "            return result\n",
    "\n",
    "        return wrapped\n",
    "        \n",
    "        \n",
    "Ocurría que los métodos aunque tenían return self.M solo sacaban None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import sqrt\n",
    "\n",
    "from py_pol.mueller import Mueller\n",
    "from py_pol.stokes import Stokes\n",
    "from py_pol.jones_matrix import Jones_matrix\n",
    "from py_pol.utils import rotation_matrix_Mueller, isrow, iscolumn, azimuth_elipt_2_charac_angles\n",
    "\n",
    "from py_pol import degrees\n",
    "import numpy as np\n",
    "\n",
    "eps = 1e-6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 @45.00º = \n",
      "  [+0.500, +0.000, +0.500, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "  [+0.500, +0.000, +0.500, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "\n",
      "[[5.00000000e-01 3.06161700e-17 5.00000000e-01 0.00000000e+00]\n",
      " [3.06161700e-17 1.87469973e-33 3.06161700e-17 0.00000000e+00]\n",
      " [5.00000000e-01 3.06161700e-17 5.00000000e-01 0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_linear(p1=1, p2=0, angle=45*degrees)\n",
    "print(M1)\n",
    "print(M1.M, sep=';;', end='\\n\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º @45.00º = \n",
      "  [+0.500, -0.000, -0.500, +0.000]\n",
      "  [-0.000, +0.000, +0.000, +0.000]\n",
      "  [-0.500, +0.000, +0.500, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      " \n",
      "\n",
      "[[ 0.5 -0.  -0.5  0. ]\n",
      " [-0.   0.   0.   0. ]\n",
      " [-0.5  0.   0.5  0. ]\n",
      " [ 0.   0.   0.   0. ]]\n"
     ]
    }
   ],
   "source": [
    "M2=M1.rotate(angle=45*degrees, keep=True)\n",
    "M2=np.round(M2,3)\n",
    "print(M1,'\\n')\n",
    "print(M2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'45.00'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "asdf[1][:-2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": "block",
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
