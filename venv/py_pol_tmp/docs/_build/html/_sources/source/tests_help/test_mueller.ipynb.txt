{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mueller module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'commit_hash': '523ed2fe5',\n",
      " 'commit_source': 'installation',\n",
      " 'default_encoding': 'cp1252',\n",
      " 'ipython_path': 'C:\\\\Users\\\\Jesus\\\\Anaconda3\\\\lib\\\\site-packages\\\\IPython',\n",
      " 'ipython_version': '7.2.0',\n",
      " 'os_name': 'nt',\n",
      " 'platform': 'Windows-10-10.0.17134-SP0',\n",
      " 'sys_executable': 'C:\\\\Users\\\\Jesus\\\\Anaconda3\\\\python.exe',\n",
      " 'sys_platform': 'win32',\n",
      " 'sys_version': '3.7.1 (default, Dec 10 2018, 22:54:23) [MSC v.1915 64 bit '\n",
      "                '(AMD64)]'}\n",
      "3.0.2\n"
     ]
    }
   ],
   "source": [
    "%run ../config_jupyter.ipynb\n",
    "%autoreload 2\n",
    "\n",
    "from math import sqrt\n",
    "\n",
    "from py_pol.mueller import Mueller\n",
    "from py_pol.stokes import Stokes\n",
    "from py_pol.jones_matrix import Jones_matrix\n",
    "from py_pol.utils import rotation_matrix_Mueller, isrow, iscolumn, azimuth_elipt_2_charac_angles, list_of_objects\n",
    "\n",
    "from py_pol import degrees\n",
    "import numpy as np\n",
    "\n",
    "eps = 1e-6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Algebraic operations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rotation with keep = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c\n",
      "M1 = \n",
      "  [+0.500, +0.500, +0.000, +0.000]\n",
      "  [+0.500, +0.500, +0.000, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "\n",
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_linear(p1=1, p2=0, angle=0*degrees)\n",
    "print(M1)\n",
    "print(M1.M)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a\n",
      "M1 @45.00ยบ = \n",
      "  [+0.500, +0.000, +0.500, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "  [+0.500, +0.000, +0.500, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      " \n",
      "\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "M2=M1.rotate(angle=45*degrees, keep=True)\n",
    "print(M1,'\\n')\n",
    "print(M2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rotation with keep = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c\n",
      "M1 = \n",
      "  [+0.500, +0.500, +0.000, +0.000]\n",
      "  [+0.500, +0.500, +0.000, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_linear(p1=1, p2=0, angle=0*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b\n",
      "M1 = \n",
      "  [+0.500, +0.500, +0.000, +0.000]\n",
      "  [+0.500, +0.500, +0.000, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      " \n",
      "\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "M2=M1.rotate(angle=45*degrees, keep=False)\n",
    "print(M1,'\\n')\n",
    "print(M2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "t=M1.vacuum()\n",
    "print(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n"
     ]
    }
   ],
   "source": [
    "t=M1.get()\n",
    "print(t)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multiplication of 2 Mueller Matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 96  68  69  69]\n",
      " [ 24  56  18  52]\n",
      " [ 58  95  71  92]\n",
      " [ 90 107  81 142]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "\"\"\" Test for matrix multiplication.\"\"\"\n",
    "solution = np.matrix(\n",
    "    np.array([[96, 68, 69, 69], [24, 56, 18, 52], [58, 95, 71, 92],\n",
    "              [90, 107, 81, 142]]))\n",
    "\n",
    "M1 = np.matrix(\n",
    "    np.array([[5, 2, 6, 1], [0, 6, 2, 0], [3, 8, 1, 4], [1, 8, 5, 6]]))\n",
    "M2 = np.matrix(\n",
    "    np.array([[7, 5, 8, 0], [1, 8, 2, 6], [9, 4, 3, 8], [5, 3, 7, 9]]))\n",
    "Mueller1 = Mueller()\n",
    "Mueller1.from_matrix(M1)\n",
    "Mueller2 = Mueller()\n",
    "Mueller2.from_matrix(M2)\n",
    "Mueller3 = Mueller1 * Mueller2\n",
    "proposal = Mueller3.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "solution = np.matrix(\n",
    "    np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_linear(p1=1, p2=0, angle=0*degrees)\n",
    "M2 = Mueller('M2')\n",
    "M2.diattenuator_linear(p1=1, p2=0, angle=90*degrees)\n",
    "M3 = M1 * M2\n",
    "proposal = M3.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.]\n",
      " [0.]\n",
      " [0.]\n",
      " [0.]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "solution = np.matrix([[1], [0], [0], [0]])\n",
    "M1 = Mueller('M1')\n",
    "M1.depolarizer([1, 0, 0])\n",
    "J1 = Stokes('J1')\n",
    "J1.from_elements(1, 0, 0, 1)\n",
    "J2 = M1 * J1\n",
    "proposal = J2.get()\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mueller matrix and stokes vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.]\n",
      " [0.]\n",
      " [0.]\n",
      " [0.]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# Matrix definition\n",
    "solution = np.matrix(np.array([[0],[0],[0],[0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_linear(p1=1, p2=0, angle=0*degrees)\n",
    "S1 = Stokes('S1')\n",
    "S1.general_azimuth_ellipticity(azimuth=90*degrees, ellipticity=0, intensity=1)\n",
    "S2 = M1*S1\n",
    "proposal = S2.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for /: 'int' and 'Mueller'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-4-30f82b69629c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mM1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mMueller\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'M1'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mM1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdiattenuator_linear\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mp1\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mp2\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mangle\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mdegrees\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mM2\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0mM1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mM2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for /: 'int' and 'Mueller'"
     ]
    }
   ],
   "source": [
    "# Division\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_linear(p1=1, p2=0, angle=0*degrees)\n",
    "M2 = 5/M1\n",
    "print(M2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Matrix operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "0.0\n",
      "0.0\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# divide_in_blocks\n",
    "solution1 = np.matrix(np.array([2, 3, 4]))\n",
    "solution2 = np.matrix(np.array([[5],[9],[13]]))\n",
    "solution3 = np.matrix(\n",
    "    np.array([[6, 7, 8], [10, 11, 12],\n",
    "              [14, 15, 16]]))\n",
    "solution4 = 1\n",
    "M = np.matrix(\n",
    "    np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12],\n",
    "              [13, 14, 15, 16]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.from_elements(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n",
    "(proposal1,proposal2,proposal3,proposal4) = M1.divide_in_blocks()\n",
    "\n",
    "print(np.linalg.norm(proposal1 - solution1))\n",
    "print(np.linalg.norm(proposal2 - solution2))\n",
    "print(np.linalg.norm(proposal3 - solution3))\n",
    "print(np.linalg.norm(proposal4 - solution4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n",
      "0.0\n",
      "[[5.00000000e-01 3.06161700e-17 5.00000000e-01 0.00000000e+00]\n",
      " [3.06161700e-17 1.87469973e-33 3.06161700e-17 0.00000000e+00]\n",
      " [5.00000000e-01 3.06161700e-17 5.00000000e-01 0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]]\n",
      "6.123233995736766e-17\n",
      "[[ 0.5        -0.25        0.4330127   0.        ]\n",
      " [-0.25        0.125      -0.21650635  0.        ]\n",
      " [ 0.4330127  -0.21650635  0.375       0.        ]\n",
      " [ 0.          0.          0.          0.        ]]\n",
      "2.2887833992611187e-16\n",
      "[[ 5.00000000e-01 -5.00000000e-01  6.12323400e-17  0.00000000e+00]\n",
      " [-5.00000000e-01  5.00000000e-01 -6.12323400e-17  0.00000000e+00]\n",
      " [ 6.12323400e-17 -6.12323400e-17  7.49879891e-33  0.00000000e+00]\n",
      " [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]]\n",
      "1.2246467991473532e-16\n"
     ]
    }
   ],
   "source": [
    "# Rotate\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0.5, 0, 0], [0.5, 0.5, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M = solution\n",
    "M1 = Mueller('M1')\n",
    "M1.from_matrix(M)\n",
    "M1.rotate(0)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, 0.5, 0], [0, 0, 0, 0], [0.5, 0, 0.5, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.from_matrix(M)\n",
    "M1.rotate(45*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "r3 = np.sqrt(3)\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, -0.25, r3/4, 0], [-0.25, 0.125, -r3/8, 0], [r3/4, -r3/8, 0.375, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.from_matrix(M)\n",
    "M1.rotate(60*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, -0.5, 0, 0], [-0.5, 0.5, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.from_matrix(M)\n",
    "M1.rotate(90*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00]\n",
      " [ 0.000000e+00  6.123234e-17  1.000000e+00  0.000000e+00]\n",
      " [ 0.000000e+00 -1.000000e+00  6.123234e-17  0.000000e+00]\n",
      " [ 0.000000e+00  0.000000e+00  0.000000e+00  1.000000e+00]]\n",
      "8.659560562354933e-17\n"
     ]
    }
   ],
   "source": [
    "# Subtest: Rotation matrix mueller\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, 0, 1, 0], [0, -1, 0, 0],\n",
    "              [0, 0, 0, 1]]))\n",
    "proposal = rotation_matrix_Mueller(45*degrees)\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definitions\n",
    "\n",
    "### from_*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  2.  3.  4.]\n",
      " [ 5.  6.  7.  8.]\n",
      " [ 9. 10. 11. 12.]\n",
      " [13. 14. 15. 16.]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# from_elemnts\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12],\n",
    "              [13, 14, 15, 16]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.from_elements(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  2  3  4]\n",
      " [ 5  6  7  8]\n",
      " [ 9 10 11 12]\n",
      " [13 14 15 16]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# from_matrix\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12],\n",
    "              [13, 14, 15, 16]]))\n",
    "\n",
    "M1 = Mueller('M1')\n",
    "M1.from_matrix(solution)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# from_Jones\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0.5, 0, 0], [0.5, 0.5, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "JM = np.matrix(np.array([[1+0j, 0],[0, 0]], dtype=complex))\n",
    "J1 = Jones_matrix('J')\n",
    "J1.from_matrix(JM)\n",
    "M1 = Mueller('M1')\n",
    "M1.from_Jones(J1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  2  3  4]\n",
      " [ 5  6  7  8]\n",
      " [ 9 10 11 12]\n",
      " [13 14 15 16]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# from_blocks\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12],\n",
    "              [13, 14, 15, 16]]))\n",
    "D = np.matrix(np.array([2, 3, 4]))\n",
    "P = np.matrix(np.array([[5],[9],[13]]))\n",
    "m = np.matrix(\n",
    "    np.array([[6, 7, 8], [10, 11, 12],\n",
    "              [14, 15, 16]]))\n",
    "m00 = 1\n",
    "\n",
    "M1 = Mueller('M1')\n",
    "M1.from_blocks(D, P, m, m00)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0004301162633521301\n",
      "0.0008602325267042792\n"
     ]
    }
   ],
   "source": [
    "# covariance_matrix and from_covariance\n",
    "original = np.matrix(\n",
    "    np.array([[1, -0.0229, 0.0027, 0.0058], [-0.0186, 0.9956, -0.0361, 0.0318], [-0.0129, 0.0392, 0.2207, -0.9656],\n",
    "              [0.0014, 0.0280, 0.9706, 0.2231]]))\n",
    "covariant = np.matrix(\n",
    "    np.array([[0.4885, -0.0083+0.0094j, 0.0066-0.0073j, 0.1109-0.484j], [-0.0086-0.0094j, 0.0022, -0.0006-0.0013j, -0.013+0.0067j], \n",
    "              [0.0066+0.0073j, -0.0006+0.0013j, 0, 0.0097-0.0065j], [0.1109+0.484j, -0.013-0.0067j, 0.0097+0.0068j, 0.5093]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.from_matrix(original)\n",
    "proposal = M1.covariance_matrix()\n",
    "print(np.linalg.norm(proposal - covariant))\n",
    "\n",
    "M1.from_covariance(covariant)\n",
    "proposal = M1.M\n",
    "print(np.linalg.norm(proposal - original))\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.48667876e-10 8.20167646e-15 9.00180757e-15 3.56020034e-16\n",
      " 3.90257240e-16 5.61816067e-15 3.07273280e-15 9.22438715e-15\n",
      " 2.21160057e-15 1.11636473e-15 1.12332627e-13 7.69768489e-16\n",
      " 2.15066920e-11 7.41525929e-14 3.87640788e-13 1.10570354e-15\n",
      " 1.17271508e-13 4.19840396e-16 2.34705850e-10 1.36247745e-14]\n"
     ]
    }
   ],
   "source": [
    "# from_inverse\n",
    "N = 20\n",
    "error= np.zeros(N)\n",
    "for ind in range(N):\n",
    "    (p1, p2, azimuth, ellipticity) = np.random.rand(4)\n",
    "    original = Mueller()\n",
    "    original.diattenuator_azimuth_ellipticity_from_vector(1.0/p1, 1.0/p2, azimuth, ellipticity)\n",
    "    M1 = Mueller()\n",
    "    M1.diattenuator_azimuth_ellipticity_from_vector(p1, p2, azimuth, ellipticity)\n",
    "    proposal = M1.from_inverse(M1)\n",
    "    error[ind] = np.linalg.norm(proposal - original.M)\n",
    "print(error)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generators\n",
    "\n",
    "**Diattenuators**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# diattenuator_linear\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0.5, 0, 0], [0.5, 0.5, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_linear(p1=1, p2=0, angle=0*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# diattenuator_linear_depolarizer\n",
    "M1 = Mueller('M1')\n",
    "try:\n",
    "    M1.diattenuator_linear_depolarizer(p1=1, p2=0, d=0.5, angle=0*degrees, verbose=True)\n",
    "    assert False\n",
    "except:\n",
    "    assert True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n",
      "0.0\n",
      "[[ 5.00000000e-01  1.11022302e-16 -5.00000000e-01  6.12323400e-17]\n",
      " [ 1.11022302e-16  0.00000000e+00 -1.11022302e-16  1.23259516e-32]\n",
      " [-5.00000000e-01 -1.11022302e-16  5.00000000e-01 -6.12323400e-17]\n",
      " [ 6.12323400e-17  1.23259516e-32 -6.12323400e-17  0.00000000e+00]]\n",
      "2.535772158592562e-16\n",
      "[[5.00000000e-01 1.11022302e-16 3.06161700e-17 5.00000000e-01]\n",
      " [1.11022302e-16 0.00000000e+00 6.16297582e-33 1.11022302e-16]\n",
      " [3.06161700e-17 6.16297582e-33 0.00000000e+00 3.06161700e-17]\n",
      " [5.00000000e-01 1.11022302e-16 3.06161700e-17 5.00000000e-01]]\n",
      "2.303328157969851e-16\n"
     ]
    }
   ],
   "source": [
    "# diattenuator_charac_angles_from_Jones\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0.5, 0, 0], [0.5, 0.5, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_charac_angles_from_Jones(p1=1, p2=0, alpha=0, delay=0)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, -0.5, 0], [0, 0, 0, 0], [-0.5, 0, 0.5, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_charac_angles_from_Jones(p1=1, p2=0, alpha=45*degrees, delay=180*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, 0, 0.5], [0, 0, 0, 0], [0, 0, 0, 0],\n",
    "              [0.5, 0, 0, 0.5]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_charac_angles_from_Jones(p1=1, p2=0, alpha=45*degrees, delay=90*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n",
      "0.0\n",
      "[[ 5.00000000e-01 -1.11022302e-16 -5.00000000e-01  6.12323400e-17]\n",
      " [-1.11022302e-16  0.00000000e+00  1.11022302e-16 -1.23259516e-32]\n",
      " [-5.00000000e-01  1.11022302e-16  5.00000000e-01 -6.12323400e-17]\n",
      " [ 6.12323400e-17 -1.23259516e-32 -6.12323400e-17  0.00000000e+00]]\n",
      "2.535772158592562e-16\n",
      "[[5.00000000e-01 1.11022302e-16 3.06161700e-17 5.00000000e-01]\n",
      " [1.11022302e-16 0.00000000e+00 6.16297582e-33 1.11022302e-16]\n",
      " [3.06161700e-17 6.16297582e-33 0.00000000e+00 3.06161700e-17]\n",
      " [5.00000000e-01 1.11022302e-16 3.06161700e-17 5.00000000e-01]]\n",
      "2.303328157969851e-16\n"
     ]
    }
   ],
   "source": [
    "# diattenuator_azimuth_ellipticity_from_Jones\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0.5, 0, 0], [0.5, 0.5, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_azimuth_ellipticity_from_Jones(p1=1, p2=0, azimuth=0, ellipticity=0)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, -0.5, 0], [0, 0, 0, 0], [-0.5, 0, 0.5, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_azimuth_ellipticity_from_Jones(p1=1, p2=0, azimuth=135*degrees, ellipticity=0)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, 0, 0.5], [0, 0, 0, 0], [0, 0, 0, 0],\n",
    "              [0.5, 0, 0, 0.5]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_azimuth_ellipticity_from_Jones(p1=1, p2=0, azimuth=45*degrees, ellipticity=45*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n",
      "0.0\n",
      "[[ 5.00000000e-01  3.06161700e-17 -5.00000000e-01  6.12323400e-17]\n",
      " [ 3.06161700e-17  1.87469973e-33 -3.06161700e-17  3.74939946e-33]\n",
      " [-5.00000000e-01 -3.06161700e-17  5.00000000e-01 -6.12323400e-17]\n",
      " [ 6.12323400e-17  3.74939946e-33 -6.12323400e-17  7.49879891e-33]]\n",
      "1.3691967456605067e-16\n",
      "[[5.00000000e-01 3.06161700e-17 3.06161700e-17 5.00000000e-01]\n",
      " [3.06161700e-17 1.87469973e-33 1.87469973e-33 3.06161700e-17]\n",
      " [3.06161700e-17 1.87469973e-33 1.87469973e-33 3.06161700e-17]\n",
      " [5.00000000e-01 3.06161700e-17 3.06161700e-17 5.00000000e-01]]\n",
      "8.659560562354933e-17\n"
     ]
    }
   ],
   "source": [
    "# diattenuator_charac_angles_from_vector\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0.5, 0, 0], [0.5, 0.5, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_charac_angles_from_vector(p1=1, p2=0, alpha=0, delay=0)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, -0.5, 0], [0, 0, 0, 0], [-0.5, 0, 0.5, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_charac_angles_from_vector(p1=1, p2=0, alpha=45*degrees, delay=180*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, 0, 0.5], [0, 0, 0, 0], [0, 0, 0, 0],\n",
    "              [0.5, 0, 0, 0.5]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_charac_angles_from_vector(p1=1, p2=0, alpha=45*degrees, delay=90*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n",
      "0.0\n",
      "[[ 5.00000000e-01 -8.04061325e-17 -5.00000000e-01  6.12323400e-17]\n",
      " [-8.04061325e-17  1.29302923e-32  8.04061325e-17 -9.84691128e-33]\n",
      " [-5.00000000e-01  8.04061325e-17  5.00000000e-01 -6.12323400e-17]\n",
      " [ 6.12323400e-17 -9.84691128e-33 -6.12323400e-17  7.49879891e-33]]\n",
      "2.021340703361228e-16\n",
      "[[5.00000000e-01 3.06161700e-17 3.06161700e-17 5.00000000e-01]\n",
      " [3.06161700e-17 1.87469973e-33 1.87469973e-33 3.06161700e-17]\n",
      " [3.06161700e-17 1.87469973e-33 1.87469973e-33 3.06161700e-17]\n",
      " [5.00000000e-01 3.06161700e-17 3.06161700e-17 5.00000000e-01]]\n",
      "8.659560562354933e-17\n"
     ]
    }
   ],
   "source": [
    "# diattenuator_azimuth_ellipticity_from_vector\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0.5, 0, 0], [0.5, 0.5, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_azimuth_ellipticity_from_vector(p1=1, p2=0, azimuth=0, ellipticity=0)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, -0.5, 0], [0, 0, 0, 0], [-0.5, 0, 0.5, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_azimuth_ellipticity_from_vector(p1=1, p2=0, azimuth=135*degrees, ellipticity=0)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, 0, 0.5], [0, 0, 0, 0], [0, 0, 0, 0],\n",
    "              [0.5, 0, 0, 0.5]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_azimuth_ellipticity_from_vector(p1=1, p2=0, azimuth=45*degrees, ellipticity=45*degrees)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5 0.5 0.  0. ]\n",
      " [0.5 0.5 0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]]\n",
      "0.0\n",
      "[[ 0.5  0.  -0.5  0. ]\n",
      " [ 0.   0.   0.   0. ]\n",
      " [-0.5  0.   0.5  0. ]\n",
      " [ 0.   0.   0.   0. ]]\n",
      "0.0\n",
      "[[0.5 0.  0.  0.5]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.  0.  0.  0. ]\n",
      " [0.5 0.  0.  0.5]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# diattenuator_from_vector\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0.5, 0, 0], [0.5, 0.5, 0, 0], [0, 0, 0, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "D = np.matrix(np.array([1, 0, 0]))\n",
    "m00 = 0.5\n",
    "M1.diattenuator_from_vector(D, m00)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, -0.5, 0], [0, 0, 0, 0], [-0.5, 0, 0.5, 0],\n",
    "              [0, 0, 0, 0]]))\n",
    "M1 = Mueller('M1')\n",
    "D = np.matrix(np.array([0, -1, 0]))\n",
    "M1.diattenuator_from_vector(D, m00)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "\n",
    "\n",
    "solution = np.matrix(\n",
    "    np.array([[0.5, 0, 0, 0.5], [0, 0, 0, 0], [0, 0, 0, 0],\n",
    "              [0.5, 0, 0, 0.5]]))\n",
    "M1 = Mueller('M1')\n",
    "D = np.matrix(np.array([0, 0, 1]))\n",
    "m00 = 0.5\n",
    "M1.diattenuator_from_vector(D, m00)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Retarders**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00]\n",
      " [ 0.0000000e+00  1.0000000e+00  0.0000000e+00  0.0000000e+00]\n",
      " [ 0.0000000e+00  0.0000000e+00 -1.0000000e+00  1.2246468e-16]\n",
      " [ 0.0000000e+00  0.0000000e+00 -1.2246468e-16 -1.0000000e+00]]\n",
      "1.7319121124709866e-16\n",
      "[[ 1.          0.          0.          0.        ]\n",
      " [ 0.          1.          0.          0.        ]\n",
      " [ 0.          0.          0.70710678  0.70710678]\n",
      " [ 0.          0.         -0.70710678  0.70710678]]\n",
      "1.5700924586837752e-16\n",
      "[[ 1.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]\n",
      " [ 0.00000000e+00  7.07106781e-01  7.07106781e-01  4.16749887e-17]\n",
      " [ 0.00000000e+00 -7.07106781e-01  7.07106781e-01  2.23077003e-16]\n",
      " [ 0.00000000e+00  1.28270594e-16 -1.87207929e-16  1.00000000e+00]]\n",
      "3.5728449608497014e-16\n"
     ]
    }
   ],
   "source": [
    "# retarder_charac_angles_from_Jones\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0],\n",
    "              [0, 0, 0, -1]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_charac_angles_from_Jones(D=180*degrees, alpha=0, delta=0, m00=1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "r2 = sqrt(2)/2\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, r2, r2],\n",
    "              [0, 0, -r2, r2]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_charac_angles_from_Jones(D=45*degrees, alpha=0, delta=0, m00=1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "r2 = sqrt(2)/2\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, r2, r2, 0], [0, -r2, r2, 0],\n",
    "              [0, 0, 0, 1]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_charac_angles_from_Jones(D=45*degrees, alpha=45*degrees, delta=90*degrees, m00=1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00]\n",
      " [ 0.0000000e+00  1.0000000e+00  0.0000000e+00  0.0000000e+00]\n",
      " [ 0.0000000e+00  0.0000000e+00 -1.0000000e+00  1.2246468e-16]\n",
      " [ 0.0000000e+00  0.0000000e+00 -1.2246468e-16 -1.0000000e+00]]\n",
      "1.7319121124709866e-16\n",
      "[[ 1.          0.          0.          0.        ]\n",
      " [ 0.          1.          0.          0.        ]\n",
      " [ 0.          0.          0.70710678  0.70710678]\n",
      " [ 0.          0.         -0.70710678  0.70710678]]\n",
      "1.5700924586837752e-16\n",
      "[[ 1.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]\n",
      " [ 0.00000000e+00  7.07106781e-01  7.07106781e-01 -4.32978028e-17]\n",
      " [ 0.00000000e+00 -7.07106781e-01  7.07106781e-01  1.79345371e-17]\n",
      " [ 0.00000000e+00  4.32978028e-17  1.79345371e-17  1.00000000e+00]]\n",
      "8.033319240475757e-16\n"
     ]
    }
   ],
   "source": [
    "# retarder_azimuth_ellipticity_from_Jones\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0],\n",
    "              [0, 0, 0, -1]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_azimuth_ellipticity_from_Jones(D=180*degrees, azimuth=0, ellipticity=0, m00=1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "r2 = sqrt(2)/2\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, r2, r2],\n",
    "              [0, 0, -r2, r2]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_azimuth_ellipticity_from_Jones(D=45*degrees, azimuth=0*degrees, ellipticity=0, m00=1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "r2 = sqrt(2)/2\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, r2, r2, 0], [0, -r2, r2, 0],\n",
    "              [0, 0, 0, 1]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_azimuth_ellipticity_from_Jones(D=45*degrees, azimuth=0, ellipticity=45*degrees, m00=1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.          0.          0.          0.        ]\n",
      " [ 0.          1.          0.          0.        ]\n",
      " [ 0.          0.          0.70710678  0.70710678]\n",
      " [ 0.          0.         -0.70710678  0.70710678]]\n",
      "0.0\n",
      "[[ 8.00000000e-01  0.00000000e+00  0.00000000e+00  0.00000000e+00]\n",
      " [ 0.00000000e+00  5.65685425e-01  5.65685425e-01 -2.02906125e-17]\n",
      " [ 0.00000000e+00 -5.65685425e-01  5.65685425e-01  4.89858720e-17]\n",
      " [ 0.00000000e+00  4.89858720e-17 -2.02906125e-17  8.00000000e-01]]\n",
      "7.498432648522078e-17\n"
     ]
    }
   ],
   "source": [
    "# retarder_charac_angles_from_vector\n",
    "r2 = sqrt(2)/2\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, r2, r2],\n",
    "              [0, 0, -r2, r2]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_charac_angles_from_vector(D=45*degrees, alpha=0, delta=0, m00=1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "r2 = sqrt(2)/2\n",
    "solution = 0.8*np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, r2, r2, 0], [0, -r2, r2, 0],\n",
    "              [0, 0, 0, 1]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_charac_angles_from_vector(D=45*degrees, alpha=45*degrees, delta=90*degrees, m00=0.8)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.          0.          0.          0.        ]\n",
      " [ 0.          1.          0.          0.        ]\n",
      " [ 0.          0.          0.70710678  0.70710678]\n",
      " [ 0.          0.         -0.70710678  0.70710678]]\n",
      "0.0\n",
      "[[ 8.00000000e-01  0.00000000e+00  0.00000000e+00  0.00000000e+00]\n",
      " [ 0.00000000e+00  5.65685425e-01  5.65685425e-01 -2.02906125e-17]\n",
      " [ 0.00000000e+00 -5.65685425e-01  5.65685425e-01  4.89858720e-17]\n",
      " [ 0.00000000e+00  4.89858720e-17 -2.02906125e-17  8.00000000e-01]]\n",
      "7.498432648522078e-17\n"
     ]
    }
   ],
   "source": [
    "# retarder_azimuth_ellipticity_from_vector\n",
    "r2 = sqrt(2)/2\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, r2, r2],\n",
    "              [0, 0, -r2, r2]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_azimuth_ellipticity_from_vector(D=45*degrees, azimuth=0*degrees, ellipticity=0, m00=1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "r2 = sqrt(2)/2\n",
    "solution = 0.8*np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, r2, r2, 0], [0, -r2, r2, 0],\n",
    "              [0, 0, 0, 1]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_azimuth_ellipticity_from_vector(D=45*degrees, azimuth=0, ellipticity=45*degrees, m00=0.8)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "[[ 1.          0.          0.          0.        ]\n",
      " [ 0.          1.          0.          0.        ]\n",
      " [ 0.          0.          0.70710678  0.70710678]\n",
      " [ 0.          0.         -0.70710678  0.70710678]]\n",
      "0.0\n",
      "[[ 0.8         0.          0.          0.        ]\n",
      " [ 0.          0.56568542  0.56568542  0.        ]\n",
      " [ 0.         -0.56568542  0.56568542  0.        ]\n",
      " [ 0.          0.          0.          0.8       ]]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "# retarder_from_vector\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0],\n",
    "              [0, 0, 0, -1]]))\n",
    "try:\n",
    "    M1 = Mueller('M1')\n",
    "    M1.retarder_from_vector(D=180*degrees, ur=None, m00=1)\n",
    "    proposal = M1.M\n",
    "    print(proposal)\n",
    "    print(np.linalg.norm(proposal - solution))\n",
    "except:\n",
    "    print(0.0)\n",
    "\n",
    "\n",
    "r2 = sqrt(2)/2\n",
    "solution = np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, r2, r2],\n",
    "              [0, 0, -r2, r2]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_from_vector(D=45*degrees, ur = np.array([1, 0, 0]), m00=1)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))\n",
    "\n",
    "r2 = sqrt(2)/2\n",
    "solution = 0.8*np.matrix(\n",
    "    np.array([[1, 0, 0, 0], [0, r2, r2, 0], [0, -r2, r2, 0],\n",
    "              [0, 0, 0, 1]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.retarder_from_vector(D=45*degrees, ur = np.array([0, 0, 1]), m00=0.8)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.625      0.375      0.         0.       ]\n",
      " [ 0.375      0.625      0.         0.       ]\n",
      " [ 0.         0.         0.25       0.4330127]\n",
      " [ 0.         0.        -0.4330127  0.25     ]]\n",
      "7.850462293418876e-17\n"
     ]
    }
   ],
   "source": [
    "# diattenuator_retarder_linear\n",
    "r3p2 = sqrt(3)/2\n",
    "solution = 0.5 * np.matrix(\n",
    "    np.array([[1.25, 0.75, 0, 0], [0.75, 1.25, 0, 0], [0, 0, 0.5, r3p2],\n",
    "              [0, 0, -r3p2, 0.5]]))\n",
    "M1 = Mueller('M1')\n",
    "M1.diattenuator_retarder_linear(p1=1, p2=sqrt(0.25), D=60*degrees, angle=0)\n",
    "proposal = M1.M\n",
    "\n",
    "print(proposal)\n",
    "print(np.linalg.norm(proposal - solution))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[autoreload of py_pol.mueller failed: Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Jesus\\Anaconda3\\lib\\site-packages\\IPython\\extensions\\autoreload.py\", line 244, in check\n",
      "    superreload(m, reload, self.old_objects)\n",
      "  File \"C:\\Users\\Jesus\\Anaconda3\\lib\\site-packages\\IPython\\extensions\\autoreload.py\", line 376, in superreload\n",
      "    module = reload(module)\n",
      "  File \"C:\\Users\\Jesus\\Anaconda3\\lib\\imp.py\", line 314, in reload\n",
      "    return importlib.reload(module)\n",
      "  File \"C:\\Users\\Jesus\\Anaconda3\\lib\\importlib\\__init__.py\", line 169, in reload\n",
      "    _bootstrap._exec(spec, module)\n",
      "  File \"<frozen importlib._bootstrap>\", line 630, in _exec\n",
      "  File \"<frozen importlib._bootstrap_external>\", line 724, in exec_module\n",
      "  File \"<frozen importlib._bootstrap_external>\", line 860, in get_code\n",
      "  File \"<frozen importlib._bootstrap_external>\", line 791, in source_to_code\n",
      "  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n",
      "  File \"d:\\codigo\\py_pol\\py_pol\\mueller.py\", line 563\n",
      "    self.M = matrix(D*np.identity(4)), dtype=real)\n",
      "                                                 ^\n",
      "SyntaxError: invalid syntax\n",
      "]\n",
      "[autoreload of py_pol.jones_matrix failed: Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Jesus\\Anaconda3\\lib\\site-packages\\IPython\\extensions\\autoreload.py\", line 244, in check\n",
      "    superreload(m, reload, self.old_objects)\n",
      "  File \"C:\\Users\\Jesus\\Anaconda3\\lib\\site-packages\\IPython\\extensions\\autoreload.py\", line 376, in superreload\n",
      "    module = reload(module)\n",
      "  File \"C:\\Users\\Jesus\\Anaconda3\\lib\\imp.py\", line 314, in reload\n",
      "    return importlib.reload(module)\n",
      "  File \"C:\\Users\\Jesus\\Anaconda3\\lib\\importlib\\__init__.py\", line 169, in reload\n",
      "    _bootstrap._exec(spec, module)\n",
      "  File \"<frozen importlib._bootstrap>\", line 630, in _exec\n",
      "  File \"<frozen importlib._bootstrap_external>\", line 724, in exec_module\n",
      "  File \"<frozen importlib._bootstrap_external>\", line 860, in get_code\n",
      "  File \"<frozen importlib._bootstrap_external>\", line 791, in source_to_code\n",
      "  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n",
      "  File \"d:\\codigo\\py_pol\\py_pol\\jones_matrix.py\", line 690\n",
      "    if global_phase % (2 * pi) != 0:\n",
      "                                   ^\n",
      "IndentationError: unindent does not match any outer indentation level\n",
      "]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "float() argument must be a string or a number, not 'Mueller'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-5-073840779474>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0ma\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0ma\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mMueller\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: float() argument must be a string or a number, not 'Mueller'"
     ]
    }
   ],
   "source": [
    "a = np.zeros([3,3])\n",
    "print(a)\n",
    "a[0,0] = Mueller()\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "print(isinstance(\"hola\", str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6]\n"
     ]
    }
   ],
   "source": [
    "a = [0, 1, 2, 3, 4 ,5, 6]\n",
    "N = len(a)\n",
    "print(a[1:N+1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  = \n",
      "  [ +0,  +0,  +0,  +0]\n",
      "  [ +0,  +0,  +0,  +0]\n",
      "  [ +0,  +0,  +0,  +0]\n",
      "  [ +0,  +0,  +0,  +0]\n",
      ",   = \n",
      "  [ +0,  +0,  +0,  +0]\n",
      "  [ +0,  +0,  +0,  +0]\n",
      "  [ +0,  +0,  +0,  +0]\n",
      "  [ +0,  +0,  +0,  +0]\n",
      ",   = \n",
      "  [ +0,  +0,  +0,  +0]\n",
      "  [ +0,  +0,  +0,  +0]\n",
      "  [ +0,  +0,  +0,  +0]\n",
      "  [ +0,  +0,  +0,  +0]\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "print(list_of_objects(3,Mueller))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
