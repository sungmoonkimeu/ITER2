{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fast checks on Stokes module"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## import module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/lib/python3/dist-packages/requests/__init__.py:80: RequestsDependencyWarning: urllib3 (1.24.1) or chardet (3.0.4) doesn't match a supported version!\n",
      "  RequestsDependencyWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'commit_hash': '523ed2fe5',\n",
      " 'commit_source': 'installation',\n",
      " 'default_encoding': 'UTF-8',\n",
      " 'ipython_path': '/home/luismiguel/.local/lib/python3.6/site-packages/IPython',\n",
      " 'ipython_version': '7.2.0',\n",
      " 'os_name': 'posix',\n",
      " 'platform': 'Linux-4.15.0-43-generic-x86_64-with-Ubuntu-18.04-bionic',\n",
      " 'sys_executable': '/usr/bin/python3',\n",
      " 'sys_platform': 'linux',\n",
      " 'sys_version': '3.6.7 (default, Oct 22 2018, 11:32:17) \\n[GCC 8.2.0]'}\n"
     ]
    }
   ],
   "source": [
    "%run ../config_jupyter.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from py_pol import degrees, np\n",
    "from py_pol.stokes import Stokes\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Operations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "j1 = [ +1;  +1;  +0;  +0]\n",
      "\n",
      "j2 = [ +1;  +1;  +0;  +0]\n",
      "\n",
      "j1 + j2 = [ +2;  +2;  +0;  +0]\n",
      "\n",
      "[[2.]\n",
      " [2.]\n",
      " [0.]\n",
      " [0.]]\n"
     ]
    }
   ],
   "source": [
    "M1 = Stokes('j1')\n",
    "M1.linear_light(angle=0 * degrees, intensity=1)\n",
    "\n",
    "M2 = Stokes('j2')\n",
    "M2.linear_light(angle=0 * degrees, intensity=1)\n",
    "\n",
    "print(M1)\n",
    "print(M2)\n",
    "M3=M1+M2\n",
    "print(M3)\n",
    "print(M3.get())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "j1 = [ +1;  +1;  +0;  +0]\n",
      "\n",
      "j2 = [ +1;  -1;  +0;  +0]\n",
      "\n",
      "j1 + j2 = [ +2;  +0;  +0;  +0]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Stokes('j1')\n",
    "M1.linear_light(angle=0 * degrees, intensity=1)\n",
    "\n",
    "M2 = Stokes('j2')\n",
    "M2.linear_light(angle=90 * degrees, intensity=1)\n",
    "\n",
    "print(M1)\n",
    "print(M2)\n",
    "M3=M1+M2\n",
    "print(M3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "j1 = [ +1;  +0;  +0;  +0]\n",
      "\n",
      "j2 = [ +1;  +0;  +0;  +0]\n",
      "\n",
      "j1 + j2 = [ +2;  +0;  +0;  +0]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# NO funcionan\n",
    "M1 = Stokes('j1')\n",
    "M1.general_charac_angles(alpha=45*degrees, delay=-90*degrees, intensity=1,  pol_degree=0,  is_depolarization=False)\n",
    "\n",
    "M2 = Stokes('j2')\n",
    "M2.general_charac_angles(alpha=45*degrees, delay=90*degrees, intensity=1,  pol_degree=0,  is_depolarization=False)\n",
    "\n",
    "print(M1)\n",
    "print(M2)\n",
    "M3 = M1+M2\n",
    "print(M3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### product by integers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "j1 = [ +1;  +0;  +0;  +0]\n",
      "\n",
      "J = [ +3;  +0;  +0;  +0]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Stokes('j1')\n",
    "M1.general_charac_angles(alpha=45*degrees, delay=-90*degrees, intensity=1,  pol_degree=0,  is_depolarization=False)\n",
    "print(M1)\n",
    "M2=M1*3\n",
    "print(M2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "j1 = [ +1;  +0;  +0;  +0]\n",
      "\n",
      "J = [ +3;  +0;  +0;  +0]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Stokes('j1')\n",
    "M1.general_charac_angles(alpha=45*degrees, delay=-90*degrees, intensity=1,  pol_degree=0,  is_depolarization=False)\n",
    "print(M1)\n",
    "M2=M1*3\n",
    "print(M2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "j1 = [ +1;  +0;  +0;  +0]\n",
      "\n",
      "J = [ +3;  +0;  +0;  +0]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Stokes('j1')\n",
    "M1.general_charac_angles(alpha=45*degrees, delay=-90*degrees, intensity=1,  pol_degree=0,  is_depolarization=False)\n",
    "print(M1)\n",
    "M2=3*M1\n",
    "print(M2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "j1 = [ +1;  +1;  +0;  +0]\n",
      "\n",
      "j1 = [ +1;  -1;  +0;  +0]\n",
      "\n",
      "J + J = [ +3;  +1;  +0;  +0]\n",
      "\n",
      "J = [ +1;  +1;  +0;  +0]\n",
      " J = [ +1;  -1;  +0;  +0]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# TODO: No ME CUADRA\n",
    "M1 = Stokes('j1')\n",
    "M1.linear_light(angle=0*degrees, intensity=1)\n",
    "print(M1)\n",
    "M2 = Stokes('j1')\n",
    "M2.linear_light(angle=90*degrees, intensity=1)\n",
    "print(M2)\n",
    "M3=(M1*2)+(1*M2)\n",
    "print(M3)\n",
    "print(1*M1, 1*M2)\n",
    "# No puede ser luz natural la suma de 2 ondas polarizadas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "j1 = [ +1;  +1;  +0;  +0]\n",
      "\n",
      "j1 = [ +1;  +1;  -0;  +0]\n",
      "\n",
      "J + J = [ +2;  +2;  -0;  +0]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# TODO: No ME CUADRA\n",
    "M1 = Stokes('j1')\n",
    "M1.linear_light(angle=0*degrees, intensity=1)\n",
    "print(M1)\n",
    "M2 = Stokes('j1')\n",
    "M2.linear_light(angle=180*degrees, intensity=1)\n",
    "print(M2)\n",
    "M3=1*M1+1*M2\n",
    "print(M3)\n",
    "# No puede ser luz natural la suma de 2 ondas polarizadas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tipos de luz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### From_elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "from_elements = [ +1;  +0;  +0;  +0]\n",
      "\n",
      "parameters of from_elements:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 0.000\n",
      "    degree linear pol.    : 0.000\n",
      "    degree   circular pol.: 0.000\n",
      "    alpha                 : nanº\n",
      "    delay                 : nanº\n",
      "    azimuth               : nanº\n",
      "    ellipticity  angle    : nanº\n",
      "    ellipticity  param    : nan\n",
      "    eccentricity          : nan\n",
      "    polarized vector      : [+0.000; +0.000; +0.000; +0.000]'\n",
      "    unpolarized vector    : [+1.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('from_elements')\n",
    "M1.from_elements(1,0,0,0)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "from_elements = [+1.000; +0.500; +0.250; +0.100]\n",
      "\n",
      "parameters of from_elements:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 0.568\n",
      "    degree linear pol.    : 0.559\n",
      "    degree   circular pol.: 0.100\n",
      "    alpha                 : 14.152º\n",
      "    delay                 : 21.801º\n",
      "    azimuth               : 13.283º\n",
      "    ellipticity  angle    : 5.071º\n",
      "    ellipticity  param    : 0.089\n",
      "    eccentricity          : 0.996\n",
      "    polarized vector      : [+0.568; +0.500; +0.250; +0.100]'\n",
      "    unpolarized vector    : [+0.432; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('from_elements')\n",
    "M1.from_elements(1,0.5,0.25,0.1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### test_general_charac_angles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_gen = [ +1;  +0;  +0;  +0]\n",
      "\n",
      "parameters of l_gen:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 0.000\n",
      "    degree linear pol.    : 0.000\n",
      "    degree   circular pol.: 0.000\n",
      "    alpha                 : nanº\n",
      "    delay                 : nanº\n",
      "    azimuth               : nanº\n",
      "    ellipticity  angle    : nanº\n",
      "    ellipticity  param    : nan\n",
      "    eccentricity          : nan\n",
      "    polarized vector      : [+0.000; +0.000; +0.000; +0.000]'\n",
      "    unpolarized vector    : [+1.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_gen')\n",
    "M1.general_charac_angles(alpha=0 * degrees, delay=0 * degrees, intensity=1, pol_degree=0)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_gen = [ +1;  +1;  +0;  +0]\n",
      "\n",
      "parameters of l_gen:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 1.000\n",
      "    degree   circular pol.: 0.000\n",
      "    alpha                 : 0.000º\n",
      "    delay                 : 0.000º\n",
      "    azimuth               : 0.000º\n",
      "    ellipticity  angle    : 0.000º\n",
      "    ellipticity  param    : 0.000\n",
      "    eccentricity          : 1.000\n",
      "    polarized vector      : [+1.000; +1.000; +0.000; +0.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_gen')\n",
    "M1.general_charac_angles(alpha=0*degrees, delay=0*degrees,  intensity=1, pol_degree=1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_gen = [ +1;  +0;  +0;  +1]\n",
      "\n",
      "parameters of l_gen:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 0.000\n",
      "    degree   circular pol.: 1.000\n",
      "    alpha                 : 45.000º\n",
      "    delay                 : 90.000º\n",
      "    azimuth               : 22.500º\n",
      "    ellipticity  angle    : 45.000º\n",
      "    ellipticity  param    : 1.000\n",
      "    eccentricity          : 0.000\n",
      "    polarized vector      : [+1.000; +0.000; +0.000; +1.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_gen')\n",
    "M1.general_charac_angles(alpha=45*degrees, delay=90*degrees,  intensity=1, pol_degree=1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_gen = [ +1;  +0;  -0;  -1]\n",
      "\n",
      "parameters of l_gen:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 0.000\n",
      "    degree   circular pol.: 1.000\n",
      "    alpha                 : 45.000º\n",
      "    delay                 : 270.000º\n",
      "    azimuth               : 35.783º\n",
      "    ellipticity  angle    : -45.000º\n",
      "    ellipticity  param    : -1.000\n",
      "    eccentricity          : 0.000\n",
      "    polarized vector      : [+1.000; +0.000; -0.000; -1.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_gen')\n",
    "M1.general_charac_angles(alpha=45*degrees, delay=270*degrees,  intensity=1, pol_degree=1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### linear light"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_linear = [ +1;  +1;  +0;  +0]\n",
      "\n",
      "parameters of l_linear:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 1.000\n",
      "    degree   circular pol.: 0.000\n",
      "    alpha                 : 0.000º\n",
      "    delay                 : 0.000º\n",
      "    azimuth               : 0.000º\n",
      "    ellipticity  angle    : 0.000º\n",
      "    ellipticity  param    : 0.000\n",
      "    eccentricity          : 1.000\n",
      "    polarized vector      : [+1.000; +1.000; +0.000; +0.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_linear')\n",
    "M1.linear_light(angle=0*degrees, intensity=1)\n",
    "print(M1)\n",
    "print(M1.parameters)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_linear = [ +1;  +0;  +1;  +0]\n",
      "\n",
      "parameters of l_linear:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 1.000\n",
      "    degree   circular pol.: 0.000\n",
      "    alpha                 : 45.000º\n",
      "    delay                 : 0.000º\n",
      "    azimuth               : 45.000º\n",
      "    ellipticity  angle    : 0.000º\n",
      "    ellipticity  param    : 0.000\n",
      "    eccentricity          : 1.000\n",
      "    polarized vector      : [+1.000; +0.000; +1.000; +0.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_linear')\n",
    "M1.linear_light(angle=45*degrees, intensity=1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_linear = [ +1;  -1;  +0;  +0]\n",
      "\n",
      "parameters of l_linear:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 1.000\n",
      "    degree   circular pol.: 0.000\n",
      "    alpha                 : 90.000º\n",
      "    delay                 : 0.000º\n",
      "    azimuth               : 90.000º\n",
      "    ellipticity  angle    : 0.000º\n",
      "    ellipticity  param    : 0.000\n",
      "    eccentricity          : 1.000\n",
      "    polarized vector      : [+1.000; -1.000; +0.000; +0.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_linear')\n",
    "M1.linear_light(angle=90*degrees, intensity=1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_linear = [ +1;  -0;  -1;  +0]\n",
      "\n",
      "parameters of l_linear:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 1.000\n",
      "    degree   circular pol.: 0.000\n",
      "    alpha                 : 45.000º\n",
      "    delay                 : 0.000º\n",
      "    azimuth               : 45.000º\n",
      "    ellipticity  angle    : 0.000º\n",
      "    ellipticity  param    : 0.000\n",
      "    eccentricity          : 1.000\n",
      "    polarized vector      : [+1.000; -0.000; -1.000; +0.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_linear')\n",
    "M1.linear_light(angle=135*degrees, intensity=1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_linear = [ +1;  +1;  -0;  +0]\n",
      "\n",
      "parameters of l_linear:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 1.000\n",
      "    degree   circular pol.: 0.000\n",
      "    alpha                 : 0.000º\n",
      "    delay                 : 0.000º\n",
      "    azimuth               : 0.000º\n",
      "    ellipticity  angle    : 0.000º\n",
      "    ellipticity  param    : 0.000\n",
      "    eccentricity          : 1.000\n",
      "    polarized vector      : [+1.000; +1.000; -0.000; +0.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_linear')\n",
    "M1.linear_light(angle=180*degrees, intensity=1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Circular light"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_circular = [ +1;  +0;  +0;  +1]\n",
      "\n",
      "parameters of l_circular:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 0.000\n",
      "    degree   circular pol.: 1.000\n",
      "    alpha                 : 45.000º\n",
      "    delay                 : 90.000º\n",
      "    azimuth               : 22.500º\n",
      "    ellipticity  angle    : 45.000º\n",
      "    ellipticity  param    : 1.000\n",
      "    eccentricity          : 0.000\n",
      "    polarized vector      : [+1.000; +0.000; +0.000; +1.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_circular')\n",
    "M1.circular_light(kind='r', intensity=1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l_circular = [ +1;  +0;  -0;  -1]\n",
      "\n",
      "parameters of l_circular:\n",
      "    intensity             : 1.000 arb. u.\n",
      "    degree polarization   : 1.000\n",
      "    degree linear pol.    : 0.000\n",
      "    degree   circular pol.: 1.000\n",
      "    alpha                 : 45.000º\n",
      "    delay                 : 270.000º\n",
      "    azimuth               : 22.500º\n",
      "    ellipticity  angle    : -45.000º\n",
      "    ellipticity  param    : -1.000\n",
      "    eccentricity          : 0.000\n",
      "    polarized vector      : [+1.000; +0.000; -0.000; -1.000]'\n",
      "    unpolarized vector    : [+0.000; +0.000; +0.000; +0.000]'\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1=Stokes('l_circular')\n",
    "M1.circular_light(kind='l', intensity=1)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parametros"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n"
     ]
    }
   ],
   "source": [
    "M1 = Stokes('j1')\n",
    "M1.linear_light(angle=0*degrees, intensity=1)\n",
    "print(M1.parameters.intensity())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J = [+0.707+0.000j; +0.000+0.707j]'\n",
      "j1 = [ +1;  +0;  +0;  +1]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from py_pol.jones_vector import Jones_vector\n",
    "\n",
    "j1=Jones_vector()\n",
    "j1.circular_light(kind='r')\n",
    "print(j1)\n",
    "\n",
    "M1=Stokes('j1')\n",
    "M1.from_Jones(j1)\n",
    "print(M1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
