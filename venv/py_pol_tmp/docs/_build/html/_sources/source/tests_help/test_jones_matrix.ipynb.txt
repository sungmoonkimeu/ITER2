{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Operations on Jones_matrix module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'commit_hash': '523ed2fe5',\n",
      " 'commit_source': 'installation',\n",
      " 'default_encoding': 'UTF-8',\n",
      " 'ipython_path': '/home/luismiguel/.local/lib/python3.6/site-packages/IPython',\n",
      " 'ipython_version': '7.2.0',\n",
      " 'os_name': 'posix',\n",
      " 'platform': 'Linux-4.15.0-45-generic-x86_64-with-Ubuntu-18.04-bionic',\n",
      " 'sys_executable': '/usr/bin/python3',\n",
      " 'sys_platform': 'linux',\n",
      " 'sys_version': '3.6.7 (default, Oct 22 2018, 11:32:17) \\n[GCC 8.2.0]'}\n"
     ]
    }
   ],
   "source": [
    "%run ../config_jupyter.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0.2\n"
     ]
    }
   ],
   "source": [
    "from py_pol import degrees, np, um\n",
    "from py_pol.jones_matrix import Jones_matrix\n",
    "from py_pol.jones_vector import Jones_vector\n",
    "from py_pol.utils import rotation_matrix_Jones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Operations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rotate Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_rot = \n",
      "      [+1, +0]\n",
      "      [+0, +0]\n",
      "M_rot @45.00 deg = \n",
      "      [+0.500, +0.500]\n",
      "      [+0.500, +0.500]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_rot')\n",
    "M1.diattenuator_perfect(angle=0*degrees)\n",
    "print(M1)\n",
    "M1.rotate(45*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Matrix multiplication"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 = \n",
      "      [+1, +1]\n",
      "      [+0, +0]\n",
      "M2 = \n",
      "      [+1, +0]\n",
      "      [+1, +0]\n",
      "M1 * M2 = \n",
      "      [+2, +0]\n",
      "      [+0, +0]\n",
      "M2 * M1 = \n",
      "      [+1, +1]\n",
      "      [+1, +1]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M1')\n",
    "M1.from_elements(1,1,0,0)\n",
    "\n",
    "M2 = Jones_matrix('M2')\n",
    "M2.from_elements(1,0,1,0)\n",
    "\n",
    "print(M1)\n",
    "print(M2)\n",
    "\n",
    "M3=M1*M2\n",
    "print(M3)\n",
    "\n",
    "M4=M2*M1\n",
    "print(M4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Matrix * numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M = \n",
      "      [+3, +3]\n",
      "      [+0, +0]\n"
     ]
    }
   ],
   "source": [
    "M4=3*M1\n",
    "print(M4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M = \n",
      "      [+3, +3]\n",
      "      [+0, +0]\n"
     ]
    }
   ],
   "source": [
    "M5=M1*3\n",
    "print(M5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear combination"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M + M = \n",
      "      [+5, +2]\n",
      "      [+3, +0]\n"
     ]
    }
   ],
   "source": [
    "M6=2*M1+3*M2\n",
    "print(M6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multiplication of Jones_matrix * Jones_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 * J1 = [(1+1j); 0j]'\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M1')\n",
    "M1.from_elements(1,1,0,0)\n",
    "\n",
    "J1 = Jones_vector('J1')\n",
    "J1.from_elements(1,1j)\n",
    "\n",
    "M3=M1*J1\n",
    "print(M3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check if Jones matrix is well defined "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.  +0.j 0.  +0.j]\n",
      " [0.25+0.j 0.  +1.j]] \n",
      "\n",
      "condition 1 = True\n",
      "condition 2 = False\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_custom')\n",
    "M1.from_elements(1,0,.25,1j)\n",
    "print(M1.M,'\\n')\n",
    "M1.check(verbose=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Jones Matrices: Generation of polarizers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### From elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.+0.j 0.+0.j]\n",
      " [0.+0.j 0.+0.j]]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_custom')\n",
    "M1.from_elements(1,0,0,0)\n",
    "print(M1.M)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_custom = \n",
      "      [+1+0j, +0+0j]\n",
      "      [+0+0j, +0+1j]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_custom')\n",
    "M1.from_elements(1,0,0,1j)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### From matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "from_matrix = \n",
      "      [+1+0j, +2+0j]\n",
      "      [+3+0j, +0+4j]\n"
     ]
    }
   ],
   "source": [
    "from numpy import matrix\n",
    "M1 = Jones_matrix('from_matrix')\n",
    "solution = matrix([[1, 2], [3, 4j]])\n",
    "M1.from_matrix(solution)\n",
    "print(M1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### from_Mueller"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from py_pol.mueller import Mueller"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "diattenuator_linear = \n",
      "  [+0.500, +0.500, +0.000, +0.000]\n",
      "  [+0.500, +0.500, +0.000, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "m1 = Mueller(\"diattenuator_linear\")\n",
    "m1.diattenuator_linear(p1=1, p2=0, angle=0*degrees)\n",
    "print(m1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "M1=Mueller('M1')\n",
    "M1.diattenuator_linear(p1=1, p2=0, angle=45*degrees)\n",
    "m2 = Jones_matrix(\"m2\")\n",
    "m2.from_Mueller(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M1 @  45.00ยบ = \n",
      "  [+0.500, +0.000, +0.500, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      "  [+0.500, +0.000, +0.500, +0.000]\n",
      "  [+0.000, +0.000, +0.000, +0.000]\n",
      " \n",
      "\n",
      "m2 = \n",
      "      [+0.500, +0.000]\n",
      "      [+0.000, +0.000]\n"
     ]
    }
   ],
   "source": [
    "print(M1,'\\n')\n",
    "print(m2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### neutral Element"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_neutral_filter = \n",
      "      [+0.250, +0.000]\n",
      "      [+0.000, +0.250]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_neutral_filter')\n",
    "M1.filter_amplifier(D=.25)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Polarizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_linear = \n",
      "      [+1, +0]\n",
      "      [+0, +0]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_linear')\n",
    "M1.diattenuator_perfect(angle=0*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_linear @  45.00ยบ = \n",
      "      [+0.500, +0.500]\n",
      "      [+0.500, +0.500]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_linear')\n",
    "M1.diattenuator_perfect(angle=45*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_linear @  90.00ยบ = \n",
      "      [+0, +0]\n",
      "      [+0, +1]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_linear')\n",
    "M1.diattenuator_perfect(angle=90*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Diattenuator linear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_diattenuator_linear = \n",
      "      [+0.750, +0.000]\n",
      "      [+0.000, +0.250]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_diattenuator_linear')\n",
    "M1.diattenuator_linear(p1=.75, p2=0.25, angle=0*degrees)\n",
    "print(M1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_diattenuator_linear @  90.00ยบ = \n",
      "      [+0.250, +0.000]\n",
      "      [+0.000, +0.750]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_diattenuator_linear')\n",
    "M1.diattenuator_linear(p1=.75, p2=0.25, angle=90*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_diattenuator_linear @  45.00ยบ = \n",
      "      [+0.500, +0.250]\n",
      "      [+0.250, +0.500]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_diattenuator_linear')\n",
    "M1.diattenuator_linear(p1=.75, p2=0.25, angle=45*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retarder_linear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retarder_linear = \n",
      "      [+1, +0]\n",
      "      [+0, +1]\n"
     ]
    }
   ],
   "source": [
    "M1= Jones_matrix('retarder_linear')\n",
    "M1.retarder_linear(delay=0, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retarder_linear = \n",
      "      [+1.000+0.000j, +0.000+0.000j]\n",
      "      [+0.000+0.000j, +0.707+0.707j]\n"
     ]
    }
   ],
   "source": [
    "M1= Jones_matrix('retarder_linear')\n",
    "M1.retarder_linear(delay=45*degrees, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retarder_linear = \n",
      "      [+1+0j, +0+0j]\n",
      "      [+0+0j, +0+1j]\n"
     ]
    }
   ],
   "source": [
    "M1= Jones_matrix('retarder_linear')\n",
    "M1.retarder_linear(delay=90*degrees, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retarder_linear @  45.00ยบ = \n",
      "      [+0.500+0.500j, +0.500-0.500j]\n",
      "      [+0.500-0.500j, +0.500+0.500j]\n"
     ]
    }
   ],
   "source": [
    "M1= Jones_matrix('retarder_linear')\n",
    "M1.retarder_linear(delay=90*degrees, angle=45*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Retarder_material"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retarder_material = \n",
      "      [+1, +0]\n",
      "      [+0, +1]\n"
     ]
    }
   ],
   "source": [
    "M1= Jones_matrix('retarder_material')\n",
    "M1.retarder_material(ne=1.5, no=1.5, d=250*um, wavelength=0.6328, angle=0.0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retarder_material = \n",
      "      [+1+0j, +0+0j]\n",
      "      [+0+0j, +0+1j]\n"
     ]
    }
   ],
   "source": [
    "wavelength=0.5*um\n",
    "M1= Jones_matrix('retarder_material')\n",
    "M1.retarder_material(ne=2, no=1, d=wavelength/4, wavelength=wavelength, angle=0.0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retarder_material = \n",
      "      [+1, +0]\n",
      "      [+0, -1]\n"
     ]
    }
   ],
   "source": [
    "wavelength=0.5*um\n",
    "M1= Jones_matrix('retarder_material')\n",
    "M1.retarder_material(ne=2, no=1, d=wavelength/2, wavelength=wavelength, angle=0.0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retarder_material = \n",
      "      [+1.000+0.000j, +0.000+0.000j]\n",
      "      [+0.000+0.000j, +0.109-0.994j]\n"
     ]
    }
   ],
   "source": [
    "um=1.\n",
    "M1= Jones_matrix('retarder_material')\n",
    "M1.retarder_material(ne=1.5, no=1.25, d=250*um, wavelength=0.6328, angle=0.0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Diattenuator retarder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_diat = \n",
      "      [+1+0j, +0+0j]\n",
      "      [+0+0j, +0+1j]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_diat')\n",
    "M1.diattenuator_retarder_linear(delay=np.pi/2, p1=1, p2=1, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_diat = \n",
      "      [+1, +0]\n",
      "      [+0, -1]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_diat')\n",
    "M1.diattenuator_retarder_linear(delay=np.pi, p1=1, p2=1, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_diat = \n",
      "      [+0.500+0.250j, +0.500-0.250j]\n",
      "      [+0.500-0.250j, +0.500+0.250j]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('M_diat')\n",
    "M1.diattenuator_retarder_linear(delay=np.pi/2, p1=1, p2=.5, angle=45*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Diattenuator_azimuth_ellipticity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "diat_az_el = \n",
      "      [+0.750, +0.000]\n",
      "      [+0.000, +0.250]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('diat_az_el')\n",
    "M1.diattenuator_azimuth_ellipticity(\n",
    "            p1=.75, p2=0.25, azimuth=0 * degrees, ellipticity=0 * degrees, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "diat_az_el = \n",
      "      [+0.750, +0.000]\n",
      "      [+0.000, +0.250]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('diat_az_el')\n",
    "M1.diattenuator_azimuth_ellipticity(\n",
    "            p1=0.75, p2=0.25, azimuth=0 * degrees, ellipticity=90 * degrees, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "diat_az_el = \n",
      "      [+0.500+0.000j, +0.000-0.500j]\n",
      "      [+0.000+0.500j, +0.500+0.000j]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('diat_az_el')\n",
    "M1.diattenuator_azimuth_ellipticity(\n",
    "            p1=1, p2=0, azimuth=0 * degrees, ellipticity=45 * degrees, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "diat_az_el = \n",
      "      [+0.500, +0.250]\n",
      "      [+0.250, +0.500]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('diat_az_el')\n",
    "M1.diattenuator_azimuth_ellipticity(\n",
    "            p1=0.75, p2=0.25, azimuth=45 * degrees, ellipticity=0 * degrees, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "diat_az_el = \n",
      "      [+0.500+0.000j, +0.000-0.500j]\n",
      "      [+0.000+0.500j, +0.500+0.000j]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('diat_az_el')\n",
    "M1.diattenuator_azimuth_ellipticity(\n",
    "            p1=1, p2=0, azimuth=45 * degrees, ellipticity=45 * degrees, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "diat_az_el = \n",
      "      [+0.500, +0.250]\n",
      "      [+0.250, +0.500]\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('diat_az_el')\n",
    "M1.diattenuator_azimuth_ellipticity(\n",
    "            p1=0.75, p2=0.25, azimuth=45 * degrees, ellipticity=90 * degrees, angle=0)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conditions for Jones Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "diat_az_el = \n",
      "      [+0.500, +0.250]\n",
      "      [+0.250, +0.500]\n",
      "condition 1 = True\n",
      "condition 2 = True\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M1 = Jones_matrix('diat_az_el')\n",
    "M1.diattenuator_azimuth_ellipticity(\n",
    "            p1=0.75, p2=0.25, azimuth=45 * degrees, ellipticity=90 * degrees, angle=0)\n",
    "print(M1)\n",
    "M1.check(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parameters of Jones Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "diat_az_el = \n",
      "      [+0.500, +0.250]\n",
      "      [+0.250, +0.500]\n",
      "parameters of diat_az_el:\n",
      "    is_homogeneous: True\n",
      "    delay:          0.000ยช\n",
      "    diattenuation:  0.800\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Jones_matrix('diat_az_el')\n",
    "M1.diattenuator_azimuth_ellipticity(\n",
    "            p1=0.75, p2=0.25, azimuth=45 * degrees, ellipticity=90 * degrees, angle=0)\n",
    "print(M1)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
